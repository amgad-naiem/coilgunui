precompile(Tuple{typeof(REPL.Terminals.hascolor), REPL.Terminals.TTYTerminal})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, REPL.LineEdit.Prompt}, Vararg{Base.Pair{Symbol, REPL.LineEdit.Prompt}, N} where N})
precompile(Tuple{Type{REPL.REPLHistoryProvider}, Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.peek), Base.IOStream})
precompile(Tuple{Type{Char}, Int32})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#44#75"))}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#73#104")){REPL.LineEdit.HistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#49#58")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#248#252")){REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#39#42")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.PackageEntry, Symbol, Base.VersionNumber})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Base.VersionNumber}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Base.SHA1}}, Base.SHA1})
precompile(Tuple{Type{Base.VersionNumber}, UInt32, UInt32, UInt32, Tuple{}, Tuple{UInt64}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{Type{Base.Set{Base.UUID}}})
precompile(Tuple{typeof(Base.push!), Base.Set{Base.UUID}, Base.UUID})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.UUID, Nothing}, Nothing})
precompile(Tuple{Type{Base.Dict{Union{Nothing, Base.UUID}, Nothing}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{Nothing, Base.UUID}, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Nothing, Base.UUID}, Nothing}, Base.UUID})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Nothing, Base.UUID}, Nothing}, Nothing, Base.UUID})
precompile(Tuple{typeof(Base.union!), Base.Set{Union{Nothing, Base.UUID}}, Base.Set{Base.UUID}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Nothing, Base.UUID}, Nothing}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Nothing, Base.UUID}, Nothing}, Nothing, Nothing})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Nothing, Base.UUID}, Nothing}, Nothing})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Nothing, Base.UUID}, Nothing}, Base.UUID})
precompile(Tuple{typeof(Base._unique!), getfield(Pkg.Types, Symbol("#134#135")), Array{Pkg.Types.RegistrySpec, 1}, Array{Pkg.Types.RegistrySpec, 1}, Base.Set{Union{Nothing, Base.UUID}}, Int64})
precompile(Tuple{typeof(Base._unique!), getfield(Pkg.Types, Symbol("#134#135")), Array{Pkg.Types.RegistrySpec, 1}, Array{Pkg.Types.RegistrySpec, 1}, Base.Set{Base.UUID}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{LibGit2.GitAnnotated, 1}, Type{Nothing}, Base.Generator{Array{LibGit2.GitAnnotated, 1}, typeof(Base.close)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{LibGit2.GitAnnotated, 1}, typeof(Base.close)}, Int64, Int64})
precompile(Tuple{typeof(Base.empty), Array{Union{Nothing, String}, 1}, Type{String}})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{getfield(Pkg.Types, Symbol("#103#109")), Array{Pkg.Types.PackageSpec, 1}}, getfield(Pkg.Types, Symbol("#102#108"))}, Int64})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(Pkg.Types, Symbol("#105#111")){String}, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pkg.Types, Symbol("#104#110")), Base.Iterators.Filter{getfield(Pkg.Types, Symbol("#105#111")){String}, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Pkg.Types, Symbol("#105#111")){String}, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Pkg.Types, Symbol("#105#111")){String}, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.UUID, 1}, Base.Generator{Base.Iterators.Filter{getfield(Pkg.Types, Symbol("#105#111")){String}, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}}, getfield(Pkg.Types, Symbol("#104#110"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.UUID, 1}, Base.Generator{Base.Iterators.Filter{getfield(Pkg.Types, Symbol("#105#111")){String}, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}}, getfield(Pkg.Types, Symbol("#104#110"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{getfield(Pkg.Types, Symbol("#105#111")){String}, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}}, getfield(Pkg.Types, Symbol("#104#110"))}})
precompile(Tuple{typeof(Base.sort!), Array{Base.UUID, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Pkg.Types, Symbol("#106#112"))}})
precompile(Tuple{typeof(Base.sort!), Array{Base.UUID, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Pkg.Types, Symbol("#106#112"))}, Array{Base.UUID, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##sort!")), NamedTuple{(:by,), Tuple{getfield(Pkg.Types, Symbol("#106#112"))}}, typeof(Base.sort!), Array{Base.UUID, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pkg.Types.PkgError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pkg.Types.PkgError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("##showerror#656")), Bool, typeof(Base.showerror), Base.IOContext{REPL.Terminals.TTYTerminal}, Pkg.Types.PkgError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##showerror")), NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{REPL.Terminals.TTYTerminal}, Pkg.Types.PkgError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{getfield(Base, Symbol("#657#658")){Pkg.Types.PkgError}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.something), REPL.LineEdit.Prompt, REPL.LineEdit.Prompt})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(REPL.LineEdit, Symbol("#148#200")), String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_move_left), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(REPL.LineEdit.edit_move_left), REPL.LineEdit.MIState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#148#200")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##edit_splice!#18")), Bool, typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s627, #s626} where #s626<:Integer where #s627<:Integer, AbstractString})
precompile(Tuple{typeof(Base.ncodeunits), String})
precompile(Tuple{typeof(Base.endswith), String, Char})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(REPL.LineEdit, Symbol("#147#199")), String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_move_right), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(REPL.LineEdit.edit_move_right), REPL.LineEdit.MIState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#147#199")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s627, #s626} where #s626<:Integer where #s627<:Integer, AbstractString})
precompile(Tuple{Type{NamedTuple{(:url,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Pkg.API, Symbol("#kw##Package")), NamedTuple{(:url,), Tuple{String}}, typeof(Pkg.API.Package)})
precompile(Tuple{typeof(Pkg.API.add), Pkg.Types.PackageSpec})
precompile(Tuple{Type{LibGit2.GitCommit}, LibGit2.GitRepo, Ptr{Nothing}})
precompile(Tuple{typeof(Base.:(==)), LibGit2.GitCommit, Nothing})
precompile(Tuple{getfield(Pkg.Types, Symbol("#79#82")), LibGit2.GitCommit})
precompile(Tuple{typeof(LibGit2.with), getfield(Pkg.Types, Symbol("#79#82")), LibGit2.GitCommit})
precompile(Tuple{typeof(LibGit2.peel), Type{LibGit2.GitTree}, LibGit2.GitCommit})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.Project, Symbol, Base.VersionNumber})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Pkg.Types.UpgradeLevel, Base.VersionNumber, Pkg.Types.VersionSpec}}, Base.VersionNumber})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(LibGit2, Symbol("#2#3")), Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :path, :repo, :tree_hash, :pinned, :version), T} where T<:Tuple}, Tuple{Base.UUID, String, Nothing, Pkg.Types.GitRepo, Base.SHA1, Bool, Base.VersionNumber}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:uuid, :name, :path, :repo, :tree_hash, :pinned, :version), Tuple{Base.UUID, String, Nothing, Pkg.Types.GitRepo, Base.SHA1, Bool, Base.VersionNumber}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Base.union), Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.Fixed}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Vararg{Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, N} where N})
precompile(Tuple{typeof(Base.promote_eltype), Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.Fixed}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltype), Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.Fixed}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Vararg{Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, N} where N})
precompile(Tuple{typeof(Base.promote_eltype), Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}})
precompile(Tuple{typeof(Base.union!), Base.Set{Base.UUID}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.Fixed}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Any}, String, Bool})
precompile(Tuple{typeof(Pkg.Operations.load_package_data_raw), Type{T} where T, String})
precompile(Tuple{Type{Pkg.Types.VersionBound}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Pkg.Types.VersionBound}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Pkg.Types.VersionBound}, Tuple{Int64}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Pkg.Types.VersionRange, Base.Dict{String, Base.UUID}}, Pkg.Types.VersionRange, Base.Dict{String, Base.UUID}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, Base.UUID}, String})
precompile(Tuple{Type{Pkg.Types.VersionBound}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Pkg.Types.VersionRange, Base.Dict{String, Pkg.Types.VersionSpec}}, Pkg.Types.VersionRange, Base.Dict{String, Pkg.Types.VersionSpec}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Pkg.Types.VersionSpec}, String})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, Pkg.Types.VersionSpec}, String})
precompile(Tuple{Type{Pkg.Types.VersionSpec}, String})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pkg.Types.VersionRange, 1}, Pkg.Types.VersionRange, Base.Generator{Array{String, 1}, Type{Pkg.Types.VersionRange}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{String, 1}, Base.Generator{Array{String, 1}, Type{Pkg.Types.VersionRange}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{Type{Pkg.Types.VersionSpec}, Array{String, 1}})
precompile(Tuple{typeof(Base.hash), Tuple{UInt64}, UInt64})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{UInt64}, Tuple{UInt64}})
precompile(Tuple{Type{Base.VersionNumber}, UInt32, UInt32, UInt32, Tuple{String}, Tuple{UInt64}})
precompile(Tuple{typeof(Base.hash), Tuple{String}, UInt64})
precompile(Tuple{Type{Base.VersionNumber}, UInt32, UInt32, UInt32, Tuple{UInt64}, Tuple{UInt64}})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{String}, Tuple{String}})
precompile(Tuple{typeof(Base.push!), Pkg.GraphType.ResolveLogEntry, Tuple{Nothing, String}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Vararg{Base.BitArray{2}, N} where N})
precompile(Tuple{typeof(Base.argtail), Base.BitArray{2}, Base.BitArray{2}, Vararg{Base.BitArray{2}, N} where N})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Base, Symbol("#231#234")), typeof(Base.add_sum), Int64, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.getindex), Array{Array{UInt64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Base, Symbol("#231#234")), typeof(Base.add_sum), Int64, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Base, Symbol("#231#234")), typeof(Base.add_sum), Int64, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Base, Symbol("#231#234")), typeof(Base.add_sum), Int64, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Base, Symbol("#231#234")), typeof(Base.add_sum), Int64, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Base, Symbol("#231#234")), typeof(Base.add_sum), Int64, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Base, Symbol("#231#234")), typeof(Base.add_sum), Int64, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Base, Symbol("#231#234")), typeof(Base.add_sum), Int64, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Base, Symbol("#231#234")), typeof(Base.add_sum), Int64, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Vararg{Base.BitArray{2}, N} where N})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Base, Symbol("#231#234")), typeof(Base.add_sum), Int64, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Base, Symbol("#231#234")), typeof(Base.add_sum), Int64, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Base, Symbol("#231#234")), typeof(Base.add_sum), Int64, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Base, Symbol("#231#234")), typeof(Base.add_sum), Int64, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Base, Symbol("#231#234")), typeof(Base.add_sum), Int64, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#233#236")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#233#236"))}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Pkg.GraphType.ResolveLog, Vararg{Any, N} where N})
precompile(Tuple{typeof(Pkg.GraphType.showlog), Base.GenericIOBuffer{Array{UInt8, 1}}, Pkg.GraphType.ResolveLog, Base.UUID})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Pkg.GraphType.ResolveLogEntry, Bool}, Any, Any})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Char, Vararg{Char, N} where N})
precompile(Tuple{typeof(Base.getproperty), Pkg.GraphType.ResolveLogEntry, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Filter{getfield(Pkg.GraphType, Symbol("#94#96")){Base.BitArray{1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, getfield(Pkg.GraphType, Symbol("#93#95")){Array{Base.BitArray{1}, 1}, Array{Int64, 1}, Array{Base.BitArray{2}, 1}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Filter{getfield(Pkg.GraphType, Symbol("#94#96")){Base.BitArray{1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, getfield(Pkg.GraphType, Symbol("#93#95")){Array{Base.BitArray{1}, 1}, Array{Int64, 1}, Array{Base.BitArray{2}, 1}, Int64}}, Int64})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}, Vararg{Base.BitArray{1}, N} where N})
precompile(Tuple{getfield(Base.Sort, Symbol("##sort!#7")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sort!), Array{Int64, 1}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.round), Type{Int64}, Float64})
precompile(Tuple{typeof(Pkg.Resolve.MaxSum.decimate!), Pkg.GraphType.Graph, Pkg.Resolve.MaxSum.SolutionTrace, Pkg.Resolve.MaxSum.Messages, Int64})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64}, Char})
precompile(Tuple{Type{NamedTuple{(:name, :version, :pinned, :tree_hash, :path, :repo), T} where T<:Tuple}, Tuple{String, Base.VersionNumber, Bool, Base.SHA1, Nothing, Pkg.Types.GitRepo}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name, :version, :pinned, :tree_hash, :path, :repo), Tuple{String, Base.VersionNumber, Bool, Base.SHA1, Nothing, Pkg.Types.GitRepo}}, Type{Pkg.Types.PackageEntry}})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Pkg.Types.PackageSpec, String}, 1}, Tuple{Pkg.Types.PackageSpec, String}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pkg.Types.PackageSpec, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pkg.Types.PackageSpec, String}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Pkg.Types.PackageSpec, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.UUID, Array{String, 1}}, Base.UUID})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SHA1})
precompile(Tuple{typeof(Base.download_url), String})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}, Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#37#62")){getfield(Pkg.PlatformEngines, Symbol("#16#41"))}, String, String})
precompile(Tuple{typeof(Base.arg_gen), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(Base, Symbol("##run#565")), Bool, typeof(Base.run), Base.Cmd, Tuple{Base.DevNull, Base.DevNull, Base.DevNull}})
precompile(Tuple{typeof(Base.run), Base.Cmd, Tuple{Base.DevNull, Base.DevNull, Base.DevNull}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.Cmd}, Tuple{Base.SubString{String}, String, Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}, String}, Tuple{Array{Any, 1}}}})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#29#54")){Base.Cmd}, String, String, Nothing})
precompile(Tuple{typeof(Base.arg_gen), Base.SubString{String}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.arg_gen), String, Base.SubString{String}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, Char, Char})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.print_to_string), Array{Any, 1}})
precompile(Tuple{typeof(Base.arg_gen), Array{Any, 1}})
precompile(Tuple{typeof(Base.run), Base.Cmd})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{String, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Pkg.Types.PackageSpec, Bool, String}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Pkg.Types.PackageSpec, Bool, String}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Pkg.Types.PackageSpec, Bool, String}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pkg.Types.PackageSpec, Bool, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pkg.Types.PackageSpec, Bool, String}, Int64, Int64})
precompile(Tuple{typeof(Base.string), String, Base.VersionNumber})
precompile(Tuple{typeof(Pkg.TOML.insertpair), Pkg.TOML.Parser{Base.IOStream}, Pkg.TOML.Table, String, Bool, Int64})
precompile(Tuple{typeof(Base.getindex), Pkg.TOML.Table, String})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#nosym#16")), String})
precompile(Tuple{Type{NamedTuple{(:libc, :compiler_abi), T} where T<:Tuple}, Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#Windows#17#18")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.Windows}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.Windows}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.Windows, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{typeof(Base.filter), Function, Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.MacOS}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{Type{NamedTuple{(:libc, :compiler_abi), T} where T<:Tuple}, Tuple{Symbol, Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#Linux#13#14")), Symbol, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.Linux}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Symbol, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.Linux}, Symbol})
precompile(Tuple{Type{Array{Union{Nothing, Symbol}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Symbol}, 1}, Tuple{Symbol, Nothing}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.Linux, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.MacOS}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.MacOS, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#FreeBSD#19#20")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.MacOS}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.MacOS}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.MacOS}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Nothing}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Nothing}, Nothing, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.push!), Base.Set{Pkg.BinaryPlatforms.Platform}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{Type{NamedTuple{(:platform, :verbose), T} where T<:Tuple}, Tuple{Pkg.BinaryPlatforms.MacOS, Bool}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##ensure_artifact_installed")), NamedTuple{(:platform, :verbose), Tuple{Pkg.BinaryPlatforms.MacOS, Bool}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#nover#17")), String})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Nothing, Nothing, Symbol}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#CompilerABI#3#4")), Nothing, Nothing, Symbol, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Nothing, Nothing, Symbol}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Pkg.BinaryPlatforms, Symbol("#40#42"))}, Pkg.BinaryPlatforms.MacOS, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{Type{Pkg.Display.VerInfo}, Base.SHA1, Nothing, Base.VersionNumber, Bool, Nothing})
precompile(Tuple{Type{Pkg.Display.VerInfo}, Base.SHA1, Nothing, Base.VersionNumber, Bool, Pkg.Types.GitRepo})
precompile(Tuple{typeof(Base.findfirst), Function, Array{String, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Pkg.Types, Symbol("#38#39")){String}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.something), Nothing, Int64})
precompile(Tuple{typeof(Base.isless), Tuple{Int64, String}, Tuple{Int64, String}})
precompile(Tuple{getfield(Pkg.Types, Symbol("#entry!#52")){getfield(Pkg.Types, Symbol("#entry!#50#53"))}, Base.Dict{String, Any}, String, Base.VersionNumber})
precompile(Tuple{getfield(Pkg.Types, Symbol("#entry!#52")){getfield(Pkg.Types, Symbol("#entry!#50#53"))}, Base.Dict{String, Any}, String, Base.SHA1})
precompile(Tuple{getfield(Pkg.Types, Symbol("#entry!#52")){getfield(Pkg.Types, Symbol("#entry!#50#53"))}, Base.Dict{String, Any}, String, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{typeof(Base.debug_color)})
precompile(Tuple{typeof(Base.warn_color)})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#708")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{Type{NamedTuple{(:stderr,), T} where T<:Tuple}, Tuple{Base.TTY}})
precompile(Tuple{getfield(Base, Symbol("##pipeline#553")), Nothing, Nothing, Base.TTY, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("#kw##pipeline")), NamedTuple{(:stderr,), Tuple{Base.TTY}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("##open#563")), Bool, Bool, typeof(Base.open), Base.CmdRedirect, Base.TTY})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.TTY})
precompile(Tuple{typeof(Base.convert), Type{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getproperty), Base.Process, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, UInt64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.write), Base.Process, String})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#698#700")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(Base.nextpow), Int64, Int64})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(Latexify.__init__)})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Function, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Base.get!), getfield(Requires, Symbol("#1#2")), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Array{Function, 1}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Requires.withpath), Any, String})
precompile(Tuple{getfield(Latexify, Symbol("#108#123"))})
precompile(Tuple{typeof(Requires.withnotifications), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Latexify, Symbol("#109#124"))})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Symbol})
precompile(Tuple{typeof(Requires.err), Any, Module, String})
precompile(Tuple{getfield(Latexify, Symbol("#110#125"))})
precompile(Tuple{getfield(Base, Symbol("#689#690")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#689#690")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.success), typeof(Base.:(&)), Array{Base.Process, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.success), typeof(Base.:(&)), Base.IndexLinear, Array{Base.Process, 1}})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Latexify.include), String})
precompile(Tuple{typeof(CompilerSupportLibraries_jll.__init__)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}, Base.UUID})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_meta#20")), Pkg.BinaryPlatforms.Platform, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_meta")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{typeof(Base.:(==)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Base.VersionNumber, Nothing, Nothing}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.MacOS}, typeof(Base.push!), Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Set{Pkg.BinaryPlatforms.Platform}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.MacOS}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##ensure_artifact_installed")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{typeof(Base.pipeline_error), Base.ProcessChain})
precompile(Tuple{typeof(Base.read), Base.OrCmds})
precompile(Tuple{typeof(Base.read), Base.OrCmds, Type{String}})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#28#53")){String, Base.Cmd}})
precompile(Tuple{typeof(Base.Filesystem.cd), getfield(Pkg.PlatformEngines, Symbol("#28#53")){String, Base.Cmd}, String})
precompile(Tuple{typeof(Base._spawn_primitive), String, Base.Cmd, Array{Any, 1}})
precompile(Tuple{typeof(Base.setup_stdios), getfield(Base, Symbol("#554#555")){Base.Cmd}, Array{Any, 1}})
precompile(Tuple{typeof(Base.success), Base.Cmd})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_cmd#14")), Bool, typeof(Pkg.PlatformEngines.probe_cmd), Base.Cmd})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_platform_engines!#15")), Bool, typeof(Pkg.PlatformEngines.probe_platform_engines!)})
precompile(Tuple{typeof(Base.read), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#280#281")){String}, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##verify#98")), Bool, Bool, String, typeof(Pkg.PlatformEngines.verify), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#82")), Bool, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#83")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, String, String})
precompile(Tuple{typeof(Base._spawn), Base.CmdRedirect, Array{Any, 1}})
precompile(Tuple{getfield(Base, Symbol("##run#565")), Bool, typeof(Base.run), Base.CmdRedirect})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_tarball_contents#84")), Bool, typeof(Pkg.PlatformEngines.get_tarball_contents), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.list_tarball_symlinks), String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#kw##cptree")), NamedTuple{(:force, :follow_symlinks), Tuple{Bool, Bool}}, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{typeof(Base.Filesystem.sendfile), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cptree#11")), Bool, Bool, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cp#12")), Bool, Bool, typeof(Base.Filesystem.cp), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#91")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#96")), Nothing, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_paths")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Base.Filesystem.rename), String, String})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, String}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#58#59")){typeof(Base.isempty)}, Array{String, 1}})
precompile(Tuple{typeof(OpenBLAS_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(OpenBLAS_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(OpenBLAS_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.vcat), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(OpenSpecFun_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(ArrayInterface.__init__)})
precompile(Tuple{getfield(ArrayInterface, Symbol("#15#39"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#16#40"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#17#41"))})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{getfield(ArrayInterface, Symbol("#18#42"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#19#43"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#20#44"))})
precompile(Tuple{getfield(Requires, Symbol("#@require")), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Requires.parsepkg), Expr})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64, Int64})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{getfield(ArrayInterface, Symbol("#63#66"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#64#67"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#65#68"))})
precompile(Tuple{typeof(FiniteDiff.__init__)})
precompile(Tuple{typeof(SparseDiffTools.__init__)})
precompile(Tuple{getfield(ArrayInterface, Symbol("#21#45"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#22#46"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#23#47"))})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Rmath_jll.__init__)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##ensure_artifact_installed")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{typeof(Base.read), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#280#281")){String}, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##verify#98")), Bool, Bool, String, typeof(Pkg.PlatformEngines.verify), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#83")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, String, String})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{Base.Pair{Nothing, String}}, Base.Pair{Base.SubString{String}, String}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#88#90"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#88#90"))}})
precompile(Tuple{typeof(Pkg.PlatformEngines.list_tarball_symlinks), String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#kw##cptree")), NamedTuple{(:force, :follow_symlinks), Tuple{Bool, Bool}}, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{typeof(Base.Filesystem.sendfile), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cptree#11")), Bool, Bool, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cp#12")), Bool, Bool, typeof(Base.Filesystem.cp), String, String})
precompile(Tuple{typeof(Base.write), Base.IOStream, Nothing})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#91")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#96")), Nothing, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_paths")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Base.Filesystem.rename), String, String})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, String}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(Random.make_seed)})
precompile(Tuple{Type{Random.MersenneTwister}, Nothing})
precompile(Tuple{typeof(Random.default_rng), Int64})
precompile(Tuple{typeof(Base.rand)})
precompile(Tuple{typeof(Base.exp), Float64})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister})
precompile(Tuple{typeof(Random.randn_unlikely), Random.MersenneTwister, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.randn)})
precompile(Tuple{typeof(Random.randexp_unlikely), Random.MersenneTwister, UInt64, Float64})
precompile(Tuple{typeof(Random.randexp), Random.MersenneTwister})
precompile(Tuple{typeof(Random.randexp)})
precompile(Tuple{typeof(Rmath.__init__)})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(RecursiveArrayTools.__init__)})
precompile(Tuple{typeof(DiffEqBase.__init__)})
precompile(Tuple{getfield(DiffEqBase, Symbol("#500#539"))})
precompile(Tuple{getfield(DiffEqBase, Symbol("#501#540"))})
precompile(Tuple{typeof(Requires.err), Any, Module, String})
precompile(Tuple{getfield(DiffEqBase, Symbol("#502#541"))})
precompile(Tuple{typeof(Base.active_project), Bool})
precompile(Tuple{typeof(Base.load_path_expand), String})
precompile(Tuple{typeof(Base.load_path)})
precompile(Tuple{getfield(Base, Symbol("#681#682")){String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#681#682")){String}, String})
precompile(Tuple{typeof(Base.project_deps_get), String, String})
precompile(Tuple{typeof(Base.manifest_uuid_path), String, Base.PkgId})
precompile(Tuple{typeof(Base.locate_package), Base.PkgId})
precompile(Tuple{typeof(Base.find_all_in_cache_path), Base.PkgId})
precompile(Tuple{typeof(Base.identify_package), String})
precompile(Tuple{getfield(Base, Symbol("#689#690")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#689#690")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.compilecache_path), Base.PkgId})
precompile(Tuple{typeof(Base.load_path_setup_code), Bool})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{getfield(Latexify, Symbol("#99#114"))})
precompile(Tuple{getfield(Latexify, Symbol("#100#115"))})
precompile(Tuple{getfield(Latexify, Symbol("#101#116"))})
precompile(Tuple{getfield(DocStringExtensions, Symbol("#24#25")){typeof(DocStringExtensions.template_hook)}, LineNumberNode, Vararg{Any, N} where N})
precompile(Tuple{typeof(DocStringExtensions.expression_type), Expr})
precompile(Tuple{typeof(DocStringExtensions.template_hook), LineNumberNode, Module, String, Expr})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any, Bool})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.Docs.signature!), Any, Expr})
precompile(Tuple{typeof(Base.Docs.splitexpr), Expr})
precompile(Tuple{typeof(Base.Docs.bindingexpr), Any})
precompile(Tuple{typeof(Base.Docs.objectdoc), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.Docs.docstr), Any, Any})
precompile(Tuple{typeof(Base.Docs._docstr), Core.SimpleVector, Any})
precompile(Tuple{typeof(Base.Docs.doc!), Module, Base.Docs.Binding, Base.Docs.DocStr, Any})
precompile(Tuple{typeof(ExponentialUtilities.__init__)})
precompile(Tuple{typeof(SuiteSparse_jll.__init__)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_meta#20")), Pkg.BinaryPlatforms.Platform, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_meta")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##ensure_artifact_installed")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_cmd#14")), Bool, typeof(Pkg.PlatformEngines.probe_cmd), Base.Cmd})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_platform_engines!#15")), Bool, typeof(Pkg.PlatformEngines.probe_platform_engines!)})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##verify#98")), Bool, Bool, String, typeof(Pkg.PlatformEngines.verify), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#82")), Bool, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#83")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, String, String})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{Base.Pair{Nothing, String}}, Base.Pair{Base.SubString{String}, String}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#88#90"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#88#90"))}})
precompile(Tuple{typeof(Pkg.PlatformEngines.list_tarball_symlinks), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.probe_symlink_creation), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#91")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#96")), Nothing, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_paths")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, String}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(Base.foreach), getfield(SuiteSparse_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(SuiteSparse_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{getfield(DiffEqBase, Symbol("#497#536"))})
precompile(Tuple{getfield(DiffEqBase, Symbol("#498#537"))})
precompile(Tuple{getfield(DiffEqBase, Symbol("#499#538"))})
precompile(Tuple{typeof(RandomNumbers.__init__)})
precompile(Tuple{typeof(DiffEqNoiseProcess.__init__)})
precompile(Tuple{getfield(DiffEqBase, Symbol("#509#548"))})
precompile(Tuple{getfield(DiffEqBase, Symbol("#510#549"))})
precompile(Tuple{getfield(DiffEqBase, Symbol("#511#550"))})
precompile(Tuple{getfield(DiffEqBase, Symbol("#527#566"))})
precompile(Tuple{getfield(DiffEqBase, Symbol("#528#567"))})
precompile(Tuple{getfield(DiffEqBase, Symbol("#529#568"))})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{getfield(ArrayInterface, Symbol("#33#57"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#34#58"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#35#59"))})
precompile(Tuple{typeof(Sundials_jll.__init__)})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Symbol, Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}}, Base.Pair{Symbol, Base.Dict{Base.SHA1, Union{Base.SHA1, String}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}}, Base.Pair{Symbol, Base.Dict{Base.SHA1, Union{Base.SHA1, String}}}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{typeof(Base.ntuple), getfield(Base, Symbol("#457#458")){Array{Base.SubString{String}, 1}}, Int64})
precompile(Tuple{Type{Base.VersionNumber}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#nover#17")), String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##ensure_artifact_installed")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple, 1}, getfield(Pkg.PlatformEngines, Symbol("#36#61"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple, 1}, getfield(Pkg.PlatformEngines, Symbol("#40#65"))}})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_platform_engines!#15")), Bool, typeof(Pkg.PlatformEngines.probe_platform_engines!)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_paths")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, String}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(Base.foreach), getfield(Sundials_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Sundials_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Sundials.__init__)})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.uv_alloc_buf), Ptr{Nothing}, UInt64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##bracketed_paste#106")), Any, typeof(REPL.LineEdit.bracketed_paste), Any})
precompile(Tuple{typeof(REPL.LineEdit.bracketed_paste), Any})
precompile(Tuple{typeof(Base.:(*)), Base.Regex, String})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.refresh_line), Any})
precompile(Tuple{getfield(Base, Symbol("#Timer#505#506")), Float64, Type{Base.Timer}, Float64})
precompile(Tuple{typeof(REPL.LineEdit.cancel_beep), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.cancel_beep), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.commit_line), Any})
precompile(Tuple{typeof(REPL.Terminals.raw!), REPL.Terminals.TTYTerminal, Bool})
precompile(Tuple{getfield(REPL, Symbol("#53#62")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{Char, String}})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#1")), Bool, Bool, Bool, typeof(Base.Meta.parse), String, Int64})
precompile(Tuple{getfield(Base.Meta, Symbol("#kw##parse")), NamedTuple{(:raise, :depwarn), Tuple{Bool, Bool}}, typeof(Base.Meta.parse), String, Int64})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.SearchState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#13")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#17")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#37")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#16")), Any, Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Base.GenericIOBuffer{Array{UInt8, 1}}, REPL.LineEdit.InputAreaState, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#kw##refresh_multi_line")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Base.GenericIOBuffer{Array{UInt8, 1}}, REPL.LineEdit.InputAreaState, Any})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert_newline), REPL.LineEdit.PromptState, Int64})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert_newline), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(REPL.LineEdit.setmark), REPL.LineEdit.MIState, Bool})
precompile(Tuple{typeof(REPL.LineEdit.set_action!), REPL.LineEdit.MIState, Symbol})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert_newline), REPL.LineEdit.MIState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#109#161")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.REPLHistoryProvider, Any})
precompile(Tuple{typeof(REPL.reset), REPL.LineEditREPL})
precompile(Tuple{getfield(REPL, Symbol("#do_respond#38")){Bool, getfield(REPL, Symbol("#48#57")){REPL.LineEditREPL, REPL.REPLHistoryProvider}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Any, Any, Any})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.getindex), LaTeXStrings.LaTeXString, Base.UnitRange{Int64}})
precompile(Tuple{typeof(REPL.ends_with_semicolon), AbstractString})
precompile(Tuple{typeof(REPL.print_response), REPL.AbstractREPL, Any, Bool, Bool})
precompile(Tuple{typeof(Base.show_exception_stack), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Any, 1}})
precompile(Tuple{typeof(Base.display_error), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Any, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{REPL.Terminals.TTYTerminal}, String})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{REPL.Terminals.TTYTerminal}, String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{ArgumentError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{ArgumentError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.show_backtrace), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{getfield(Base, Symbol("##showerror#656")), Bool, typeof(Base.showerror), Base.IOContext{REPL.Terminals.TTYTerminal}, ArgumentError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##showerror")), NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{REPL.Terminals.TTYTerminal}, ArgumentError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{REPL.Terminals.TTYTerminal}})
precompile(Tuple{typeof(Base.with_output_color), Function, Symbol, Base.IOContext{REPL.Terminals.TTYTerminal}})
precompile(Tuple{typeof(Base.showerror), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, ArgumentError})
precompile(Tuple{getfield(Base, Symbol("#657#658")){ArgumentError}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.arg_decl_parts), Method})
precompile(Tuple{getfield(Base, Symbol("##show#393")), Nothing, typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Method})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Core.MethodInstance})
precompile(Tuple{getfield(Base, Symbol("##show#379")), Symbol, typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Core.CodeInfo})
precompile(Tuple{typeof(Base.StackTraces.show_spec_linfo), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.StackTraces.StackFrame})
precompile(Tuple{getfield(Base.StackTraces, Symbol("##show#9")), Bool, typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.StackTraces.StackFrame})
precompile(Tuple{getfield(Base, Symbol("##show_trace_entry#673")), String, typeof(Base.show_trace_entry), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.StackTraces.StackFrame, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##show_trace_entry")), NamedTuple{(:prefix,), Tuple{String}}, typeof(Base.show_trace_entry), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.StackTraces.StackFrame, Int64})
precompile(Tuple{typeof(Base.show_tuple_as_call), Base.IOContext{REPL.Terminals.TTYTerminal}, Symbol, Type})
precompile(Tuple{typeof(Base.show_type_name), Base.IOContext{REPL.Terminals.TTYTerminal}, Core.TypeName})
precompile(Tuple{typeof(Base.show_datatype), Base.IOContext{REPL.Terminals.TTYTerminal}, DataType})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Type{T} where T})
precompile(Tuple{typeof(REPL.LineEdit.transition), Function, REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.ModeState, Any, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_line), Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#14")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert), REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert), REPL.LineEdit.PromptState, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_kill_region), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Bool})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.MIState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#110#162")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.PromptState, Bool, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##edit_splice!#18")), Bool, typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s627, #s626} where #s626<:Integer where #s627<:Integer, AbstractString})
precompile(Tuple{typeof(Pkg.API.check_package_name), String, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pkg.Types.PackageSpec, 1}, Pkg.Types.PackageSpec, Base.Generator{Array{String, 1}, getfield(Pkg.API, Symbol("#22#23"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, getfield(Pkg.API, Symbol("#22#23"))}})
precompile(Tuple{typeof(Pkg.Types.find_project_file), Nothing})
precompile(Tuple{typeof(Pkg.TOML.nested), Pkg.TOML.Parser{Base.IOStream}, Pkg.TOML.Table, Array{String, 1}, Int64})
precompile(Tuple{typeof(Pkg.TOML.addarray), Pkg.TOML.Parser{Base.IOStream}, Pkg.TOML.Table, Array{String, 1}, Pkg.TOML.Table, Int64})
precompile(Tuple{typeof(Pkg.TOML.addtable), Pkg.TOML.Parser{Base.IOStream}, Pkg.TOML.Table, Array{String, 1}, Pkg.TOML.Table, Int64})
precompile(Tuple{typeof(Pkg.TOML.parse), Pkg.TOML.Parser{Base.IOStream}})
precompile(Tuple{typeof(Pkg.TOML.parse), Base.IOStream})
precompile(Tuple{typeof(Pkg.Types.read_project_version), String})
precompile(Tuple{Type{Pkg.Types.Project}, Base.Dict{String, Any}})
precompile(Tuple{getfield(Pkg.Types, Symbol("##read_project#31")), String, typeof(Pkg.Types.read_project), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Pkg.Types, Symbol("#34#35")){String}, String})
precompile(Tuple{typeof(Pkg.Types.read_project), String})
precompile(Tuple{Type{Base.Dict{Base.UUID, Pkg.Types.PackageEntry}}, Base.Dict{String, Any}})
precompile(Tuple{getfield(Pkg.Types, Symbol("##read_manifest#45")), String, typeof(Pkg.Types.read_manifest), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Pkg.Types, Symbol("#48#49")){String}, String})
precompile(Tuple{Type{Pkg.Types.EnvCache}, Nothing})
precompile(Tuple{typeof(Pkg.Types.load_stdlib)})
precompile(Tuple{Type{Pkg.Types.Context}})
precompile(Tuple{typeof(Pkg.API.add), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{getfield(Pkg.API, Symbol("##add#20")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.API.add), String})
precompile(Tuple{typeof(Pkg.API.add), String})
precompile(Tuple{typeof(Pkg.TOML.table2dict), Pkg.TOML.Table})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Dict{String, Any}, 1}, Base.Generator{Array{Any, 1}, typeof(Pkg.TOML.table2dict)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Pkg.TOML.table2dict)}})
precompile(Tuple{typeof(Pkg.Types.read_field), String, Nothing, Base.Dict{String, Any}, typeof(Pkg.Types.safe_uuid)})
precompile(Tuple{typeof(Pkg.Types.safe_version), String})
precompile(Tuple{typeof(Pkg.Types.read_field), String, Nothing, Base.Dict{String, Any}, typeof(Pkg.Types.safe_version)})
precompile(Tuple{typeof(Pkg.Types.read_field), String, Nothing, Base.Dict{String, Any}, typeof(Pkg.Types.safe_path)})
precompile(Tuple{typeof(Pkg.Types.read_field), String, Nothing, Base.Dict{String, Any}, typeof(Base.identity)})
precompile(Tuple{typeof(Pkg.Types.read_field), String, Nothing, Base.Dict{String, Any}, typeof(Pkg.Types.safe_SHA1)})
precompile(Tuple{getfield(Pkg.Types, Symbol("##read_registry#128")), Bool, typeof(Pkg.Types.read_registry), String})
precompile(Tuple{typeof(Pkg.Types.collect_registries), String})
precompile(Tuple{typeof(Pkg.Types.find_installed_registries), Array{Pkg.Types.RegistrySpec, 1}, Array{Pkg.Types.RegistrySpec, 1}})
precompile(Tuple{typeof(Base.unique), getfield(Pkg.Types, Symbol("#134#135")), Array{Pkg.Types.RegistrySpec, 1}})
precompile(Tuple{Type{LibGit2.GitHash}})
precompile(Tuple{Type{LibGit2.GitHash}, Ptr{UInt8}})
precompile(Tuple{Type{LibGit2.GitHash}, LibGit2.GitReference})
precompile(Tuple{getfield(LibGit2, Symbol("#41#42")){LibGit2.GitRepo}, LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.with), getfield(LibGit2, Symbol("#41#42")){LibGit2.GitRepo}, LibGit2.GitReference})
precompile(Tuple{getfield(Base, Symbol("##shell_parse#350")), String, typeof(Base.shell_parse), String, Bool})
precompile(Tuple{typeof(Base.shell_split), String})
precompile(Tuple{typeof(Base.parse), Type{LibGit2.GitCredentialHelper}, String})
precompile(Tuple{typeof(LibGit2.credential_helpers), LibGit2.GitConfig, LibGit2.GitCredential})
precompile(Tuple{getfield(Base, Symbol("##open#563")), Bool, Bool, typeof(Base.open), Base.Cmd, Base.DevNull})
precompile(Tuple{typeof(Base.open), Base.Cmd, String, Base.DevNull})
precompile(Tuple{typeof(Base.read!), Base.Process, LibGit2.GitCredential})
precompile(Tuple{typeof(LibGit2.run!), LibGit2.GitCredentialHelper, String, LibGit2.GitCredential})
precompile(Tuple{typeof(LibGit2.approve), LibGit2.GitConfig, LibGit2.UserPasswordCredential, String})
precompile(Tuple{getfield(LibGit2, Symbol("##approve#33")), Bool, typeof(LibGit2.approve), LibGit2.CredentialPayload})
precompile(Tuple{typeof(LibGit2.reject), LibGit2.GitConfig, LibGit2.UserPasswordCredential, String})
precompile(Tuple{getfield(LibGit2, Symbol("##reject#34")), Bool, typeof(LibGit2.reject), LibGit2.CredentialPayload})
precompile(Tuple{getfield(LibGit2, Symbol("##fetch#115")), String, String, Array{String, 1}, Nothing, Base.Dict{Symbol, Tuple{Ptr{Nothing}, Any}}, typeof(LibGit2.fetch), LibGit2.GitRepo})
precompile(Tuple{getfield(LibGit2, Symbol("#kw##fetch")), NamedTuple{(:remoteurl, :callbacks, :refspecs), Tuple{String, Base.Dict{Symbol, Tuple{Ptr{Nothing}, Any}}, Array{String, 1}}}, typeof(LibGit2.fetch), LibGit2.GitRepo})
precompile(Tuple{getfield(Pkg.GitTools, Symbol("##fetch#5")), Nothing, Base.Iterators.Pairs{Symbol, Array{String, 1}, Tuple{Symbol}, NamedTuple{(:refspecs,), Tuple{Array{String, 1}}}}, typeof(Pkg.GitTools.fetch), LibGit2.GitRepo, Nothing})
precompile(Tuple{getfield(LibGit2, Symbol("#84#85")){LibGit2.GitRepo, LibGit2.GitCommit}, LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.with), getfield(LibGit2, Symbol("#84#85")){LibGit2.GitRepo, LibGit2.GitCommit}, LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.ffmerge!), LibGit2.GitRepo, LibGit2.GitAnnotated})
precompile(Tuple{getfield(LibGit2, Symbol("##merge!#86")), LibGit2.MergeOptions, LibGit2.CheckoutOptions, typeof(LibGit2.merge!), LibGit2.GitRepo, Array{LibGit2.GitAnnotated, 1}})
precompile(Tuple{getfield(LibGit2, Symbol("##merge!#89")), LibGit2.MergeOptions, LibGit2.CheckoutOptions, typeof(LibGit2.merge!), LibGit2.GitRepo, Array{LibGit2.GitAnnotated, 1}, Bool})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, Int32})
precompile(Tuple{typeof(Base.setindex!), Array{Nothing, 1}, Int32, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Nothing, 1}, Int32, Base.Generator{Array{LibGit2.GitAnnotated, 1}, typeof(Base.close)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{LibGit2.GitAnnotated, 1}, Base.Generator{Array{LibGit2.GitAnnotated, 1}, typeof(Base.close)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{Type{LibGit2.GitAnnotated}, LibGit2.GitRepo, String})
precompile(Tuple{typeof(LibGit2.with), getfield(LibGit2, Symbol("#146#154")), LibGit2.GitReference})
precompile(Tuple{getfield(LibGit2, Symbol("##merge!#140")), String, String, Bool, LibGit2.MergeOptions, LibGit2.CheckoutOptions, typeof(LibGit2.merge!), LibGit2.GitRepo})
precompile(Tuple{typeof(LibGit2.commit), LibGit2.GitRebase, LibGit2.GitSignature})
precompile(Tuple{getfield(LibGit2, Symbol("#157#158")){LibGit2.GitRepo, String, String}, LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.with), getfield(LibGit2, Symbol("#157#158")){LibGit2.GitRepo, String, String}, LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.head_oid), LibGit2.GitRepo})
precompile(Tuple{typeof(Base._collect), Type{Pkg.Types.RegistrySpec}, Base.Iterators.Flatten{Base.Generator{Array{String, 1}, getfield(Pkg.Types, Symbol("#117#118"))}}, Base.SizeUnknown})
precompile(Tuple{getfield(Pkg.Types, Symbol("##update_registries#133")), Bool, typeof(Pkg.Types.update_registries), Pkg.Types.Context, Array{Pkg.Types.RegistrySpec, 1}})
precompile(Tuple{getfield(LibGit2, Symbol("##fetch#115")), String, String, Array{String, 1}, LibGit2.CachedCredentials, Base.Dict{Symbol, Tuple{Ptr{Nothing}, Any}}, typeof(LibGit2.fetch), LibGit2.GitRepo})
precompile(Tuple{getfield(LibGit2, Symbol("#kw##fetch")), NamedTuple{(:remoteurl, :callbacks, :refspecs, :credentials), Tuple{String, Base.Dict{Symbol, Tuple{Ptr{Nothing}, Any}}, Array{String, 1}, LibGit2.CachedCredentials}}, typeof(LibGit2.fetch), LibGit2.GitRepo})
precompile(Tuple{getfield(Pkg.GitTools, Symbol("##fetch#5")), Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:refspecs, :credentials), Tuple{Array{String, 1}, LibGit2.CachedCredentials}}}, typeof(Pkg.GitTools.fetch), LibGit2.GitRepo, Nothing})
precompile(Tuple{typeof(LibGit2.with), getfield(Pkg.Types, Symbol("#74#76")){LibGit2.CachedCredentials}, LibGit2.GitRepo})
precompile(Tuple{typeof(Base.shred!), getfield(Pkg.Types, Symbol("#73#75")){Nothing, String}, LibGit2.CachedCredentials})
precompile(Tuple{typeof(Pkg.Types.get_object_branch), LibGit2.GitRepo, String, LibGit2.CachedCredentials})
precompile(Tuple{getfield(Pkg.Types, Symbol("#78#81")){LibGit2.GitRepo}, LibGit2.CachedCredentials})
precompile(Tuple{typeof(Base.shred!), getfield(Pkg.Types, Symbol("#78#81")){LibGit2.GitRepo}, LibGit2.CachedCredentials})
precompile(Tuple{getfield(Pkg.Types, Symbol("#77#80")), LibGit2.GitRepo})
precompile(Tuple{typeof(LibGit2.with), getfield(Pkg.Types, Symbol("#77#80")), LibGit2.GitRepo})
precompile(Tuple{typeof(Pkg.Types.guess_rev), String})
precompile(Tuple{typeof(Pkg.Types.read_package), String})
precompile(Tuple{getfield(LibGit2, Symbol("##clone#131")), String, Bool, Ptr{Nothing}, LibGit2.CachedCredentials, Base.Dict{Symbol, Tuple{Ptr{Nothing}, Any}}, typeof(LibGit2.clone), String, String})
precompile(Tuple{getfield(Pkg.GitTools, Symbol("##clone#4")), String, Base.Iterators.Pairs{Symbol, LibGit2.CachedCredentials, Tuple{Symbol}, NamedTuple{(:credentials,), Tuple{LibGit2.CachedCredentials}}}, typeof(Pkg.GitTools.clone), String, String})
precompile(Tuple{getfield(Pkg.Types, Symbol("#124#126")){Pkg.Types.RegistrySpec, String}, LibGit2.CachedCredentials})
precompile(Tuple{typeof(Base.shred!), getfield(Pkg.Types, Symbol("#124#126")){Pkg.Types.RegistrySpec, String}, LibGit2.CachedCredentials})
precompile(Tuple{typeof(Pkg.Types.clone_or_cp_registries), Pkg.Types.Context, Array{Pkg.Types.RegistrySpec, 1}, String})
precompile(Tuple{typeof(Pkg.Types.clone_default_registries)})
precompile(Tuple{typeof(Pkg.Types.find_registered!), Pkg.Types.EnvCache, Array{String, 1}, Array{Base.UUID, 1}})
precompile(Tuple{typeof(Pkg.Types.registered_uuids), Pkg.Types.EnvCache, String})
precompile(Tuple{typeof(Pkg.Types.parse_package!), Pkg.Types.Context, Pkg.Types.PackageSpec, String})
precompile(Tuple{getfield(Pkg.Types, Symbol("#84#87")){LibGit2.CachedCredentials, getfield(Pkg.Types, Symbol("#89#90")){String}, String}, LibGit2.GitRepo})
precompile(Tuple{typeof(LibGit2.with), getfield(Pkg.Types, Symbol("#84#87")){LibGit2.CachedCredentials, getfield(Pkg.Types, Symbol("#89#90")){String}, String}, LibGit2.GitRepo})
precompile(Tuple{typeof(Base.shred!), getfield(Pkg.Types, Symbol("#83#86")){getfield(Pkg.Types, Symbol("#89#90")){String}, String, String}, LibGit2.CachedCredentials})
precompile(Tuple{getfield(Pkg.GitTools, Symbol("##clone#4")), Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:isbare, :credentials), Tuple{Bool, LibGit2.CachedCredentials}}}, typeof(Pkg.GitTools.clone), String, String})
precompile(Tuple{typeof(Base.shred!), getfield(Pkg.Types, Symbol("#73#75")){String, String}, LibGit2.CachedCredentials})
precompile(Tuple{typeof(Pkg.Types.registered_info), Pkg.Types.EnvCache, Base.UUID, String})
precompile(Tuple{typeof(REPL.TerminalMenus.enableRawMode), REPL.Terminals.TTYTerminal})
precompile(Tuple{typeof(REPL.TerminalMenus.disableRawMode), REPL.Terminals.TTYTerminal})
precompile(Tuple{typeof(REPL.TerminalMenus.request), REPL.Terminals.TTYTerminal, REPL.TerminalMenus.RadioMenu})
precompile(Tuple{typeof(REPL.TerminalMenus.request), REPL.Terminals.TTYTerminal, String, REPL.TerminalMenus.RadioMenu})
precompile(Tuple{typeof(REPL.TerminalMenus.request), String, REPL.TerminalMenus.RadioMenu})
precompile(Tuple{typeof(Pkg.Types.registered_uuid), Pkg.Types.EnvCache, String})
precompile(Tuple{typeof(Pkg.Types.registered_names), Pkg.Types.EnvCache, Base.UUID})
precompile(Tuple{typeof(Pkg.Types.registered_name), Pkg.Types.EnvCache, Base.UUID})
precompile(Tuple{typeof(Pkg.Types.registry_resolve!), Pkg.Types.EnvCache, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Base.grow_to!), Array{Union{Nothing, String}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Pkg.Types, Symbol("#103#109")), Array{Pkg.Types.PackageSpec, 1}}, getfield(Pkg.Types, Symbol("#102#108"))}})
precompile(Tuple{getfield(Pkg.Types, Symbol("##ensure_resolved#101")), Bool, typeof(Pkg.Types.ensure_resolved), Pkg.Types.EnvCache, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Types.resolve_repo_add!), Pkg.Types.Context, Pkg.Types.PackageSpec})
precompile(Tuple{getfield(Pkg.Types, Symbol("#91#92")), LibGit2.GitTree})
precompile(Tuple{getfield(Pkg.Types, Symbol("#85#88")){LibGit2.GitRepo, getfield(Pkg.Types, Symbol("#91#92"))}, LibGit2.GitTree})
precompile(Tuple{typeof(LibGit2.with), getfield(Pkg.Types, Symbol("#85#88")){LibGit2.GitRepo, getfield(Pkg.Types, Symbol("#91#92"))}, LibGit2.GitTree})
precompile(Tuple{getfield(Pkg.Types, Symbol("#84#87")){LibGit2.CachedCredentials, getfield(Pkg.Types, Symbol("#91#92")), String}, LibGit2.GitRepo})
precompile(Tuple{typeof(LibGit2.with), getfield(Pkg.Types, Symbol("#84#87")){LibGit2.CachedCredentials, getfield(Pkg.Types, Symbol("#91#92")), String}, LibGit2.GitRepo})
precompile(Tuple{typeof(Base.shred!), getfield(Pkg.Types, Symbol("#83#86")){getfield(Pkg.Types, Symbol("#91#92")), String, String}, LibGit2.CachedCredentials})
precompile(Tuple{typeof(Pkg.Types.instantiate_pkg_repo!), Pkg.Types.PackageSpec, Nothing})
precompile(Tuple{typeof(Pkg.Types.instantiate_pkg_repo!), Pkg.Types.PackageSpec, String})
precompile(Tuple{typeof(Pkg.Types.handle_repo_add!), Pkg.Types.Context, Pkg.Types.PackageSpec})
precompile(Tuple{typeof(Pkg.Types.handle_repos_add!), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Operations.update_package_add), Pkg.Types.PackageSpec, Pkg.Types.PackageEntry, Bool})
precompile(Tuple{getfield(Pkg.Operations, Symbol("##load_direct_deps!#5")), Bool, typeof(Pkg.Operations.load_direct_deps!), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{getfield(Pkg.Operations, Symbol("##load_all_deps!#6")), Bool, typeof(Pkg.Operations.load_all_deps!), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Operations.tracking_registered_version), Pkg.Types.PackageSpec})
precompile(Tuple{typeof(Base.filter), typeof(Pkg.Operations.tracking_registered_version), Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Types.registered_paths), Pkg.Types.EnvCache, Base.UUID})
precompile(Tuple{typeof(Pkg.Operations.check_registered), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Operations.source_path), Pkg.Types.PackageSpec})
precompile(Tuple{getfield(Pkg.Operations, Symbol("#9#11")){Bool}, Base.Pair{String, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Pkg.Operations, Symbol("#9#11")){Bool}, Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.VersionNumber, Base.SHA1}, Base.VersionNumber})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.VersionNumber, Base.SHA1}, Base.SHA1, Base.VersionNumber})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Pkg.Operations, Symbol("#9#11")){Bool}, Base.Dict{String, Any}}, Int64})
precompile(Tuple{getfield(Pkg.Operations, Symbol("#8#10")), Base.Pair{String, Any}})
precompile(Tuple{Type{Base.Dict{Base.VersionNumber, Base.SHA1}}, Base.Generator{Base.Iterators.Filter{getfield(Pkg.Operations, Symbol("#9#11")){Bool}, Base.Dict{String, Any}}, getfield(Pkg.Operations, Symbol("#8#10"))}})
precompile(Tuple{getfield(Pkg.Operations, Symbol("##load_versions#7")), Bool, typeof(Pkg.Operations.load_versions), String})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.VersionNumber, Nothing}, Base.VersionNumber})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.VersionNumber, Nothing}, Nothing, Base.VersionNumber})
precompile(Tuple{typeof(Base.union!), Base.Set{Base.VersionNumber}, Base.KeySet{Base.VersionNumber, Base.Dict{Base.VersionNumber, Base.SHA1}}})
precompile(Tuple{typeof(Pkg.Operations.set_maximum_version_registry!), Pkg.Types.EnvCache, Pkg.Types.PackageSpec})
precompile(Tuple{typeof(Pkg.Operations.collect_project!), Pkg.Types.Context, Pkg.Types.PackageSpec, String, Base.Dict{Base.UUID, Array{Pkg.Types.PackageSpec, 1}}})
precompile(Tuple{Type{Base.VersionNumber}, Base.SubString{String}})
precompile(Tuple{typeof(Pkg.Pkg2.Pkg2Types.normalize!), Array{Pkg.Pkg2.Pkg2Types.VersionInterval, 1}})
precompile(Tuple{Type{Pkg.Pkg2.Pkg2Types.VersionSet}, Array{Base.VersionNumber, 1}})
precompile(Tuple{Type{Pkg.Pkg2.Reqs.Requirement}, String})
precompile(Tuple{typeof(Pkg.Pkg2.Reqs.read), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), typeof(Pkg.Pkg2.Reqs.read), String})
precompile(Tuple{typeof(Pkg.Operations.find_stdlib_deps), Pkg.Types.Context, String})
precompile(Tuple{typeof(Pkg.Operations.collect_require!), Pkg.Types.Context, Pkg.Types.PackageSpec, String, Base.Dict{Base.UUID, Array{Pkg.Types.PackageSpec, 1}}})
precompile(Tuple{typeof(Pkg.Operations.collect_fixed!), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}, Base.Dict{Base.UUID, String}})
precompile(Tuple{typeof(Base.union!), Base.Set{Base.VersionNumber}, Array{Base.VersionNumber, 1}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.VersionNumber, Int64}, Base.VersionNumber})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.VersionNumber, Int64}, Int64, Base.VersionNumber})
precompile(Tuple{Type{Base.Dict{Base.VersionNumber, Int64}}, Base.Generator{Base.Iterators.Enumerate{Array{Base.VersionNumber, 1}}, getfield(Pkg.GraphType, Symbol("#4#11"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{Base.VersionNumber, Int64}, 1}, Base.Dict{Base.VersionNumber, Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(Pkg.GraphType, Symbol("#3#10")){Array{Array{Base.VersionNumber, 1}, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Pkg.GraphType, Symbol("#3#10")){Array{Array{Base.VersionNumber, 1}, 1}}}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Nothing, Base.VersionNumber}, Nothing}, Base.VersionNumber})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Nothing, Base.VersionNumber}, Nothing}, Nothing, Base.VersionNumber})
precompile(Tuple{typeof(Base.union!), Base.Set{Union{Nothing, Base.VersionNumber}}, Base.Set{Base.VersionNumber}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Nothing, Base.VersionNumber}, Base.Set{Union{Nothing, Base.VersionNumber}}}, Base.Set{Base.VersionNumber}, Nothing})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Nothing, Base.VersionNumber}, Base.Set{Union{Nothing, Base.VersionNumber}}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Nothing, Base.VersionNumber}, Base.Set{Union{Nothing, Base.VersionNumber}}}, Base.Set{Base.VersionNumber}, Base.VersionNumber})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Nothing, Base.VersionNumber}, Base.Set{Union{Nothing, Base.VersionNumber}}}, Base.Set{Nothing}, Base.VersionNumber})
precompile(Tuple{Type{Pkg.GraphType.GraphData}, Base.Dict{Base.UUID, Base.Set{Base.VersionNumber}}, Base.Dict{Base.UUID, Base.Dict{Pkg.Types.VersionRange, Base.Dict{String, Base.UUID}}}, Base.Dict{Base.UUID, Base.Dict{Pkg.Types.VersionRange, Base.Dict{String, Pkg.Types.VersionSpec}}}, Base.Dict{Base.UUID, String}, Bool})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.VersionNumber, Int64}, Base.VersionNumber})
precompile(Tuple{typeof(Pkg.GraphType._add_fixed!), Pkg.GraphType.Graph, Base.Dict{Base.UUID, Pkg.Types.Fixed}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Nothing, Base.VersionNumber}, Nothing}, Base.VersionNumber})
precompile(Tuple{typeof(Pkg.GraphType.check_consistency), Pkg.GraphType.Graph})
precompile(Tuple{Type{Pkg.GraphType.Graph}, Base.Dict{Base.UUID, Base.Set{Base.VersionNumber}}, Base.Dict{Base.UUID, Base.Dict{Pkg.Types.VersionRange, Base.Dict{String, Base.UUID}}}, Base.Dict{Base.UUID, Base.Dict{Pkg.Types.VersionRange, Base.Dict{String, Pkg.Types.VersionSpec}}}, Base.Dict{Base.UUID, String}, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}, Base.Dict{Base.UUID, Pkg.Types.Fixed}, Bool})
precompile(Tuple{typeof(Pkg.Operations.deps_graph), Pkg.Types.Context, Base.Dict{Base.UUID, String}, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}, Base.Dict{Base.UUID, Pkg.Types.Fixed}})
precompile(Tuple{typeof(Pkg.GraphType.log_event_global!), Pkg.GraphType.Graph, String})
precompile(Tuple{getfield(Pkg.GraphType, Symbol("##propagate_constraints!#61")), Bool, typeof(Pkg.GraphType.propagate_constraints!), Pkg.GraphType.Graph, Base.Set{Int64}})
precompile(Tuple{typeof(Base.findall), Base.BitArray{1}})
precompile(Tuple{typeof(Pkg.GraphType.disable_unreachable!), Pkg.GraphType.Graph, Base.Set{Int64}})
precompile(Tuple{typeof(Pkg.GraphType.deep_clean!), Pkg.GraphType.Graph})
precompile(Tuple{Type{Base.Dict{Base.VersionNumber, Int64}}, Base.Generator{Base.Iterators.Enumerate{Array{Base.VersionNumber, 1}}, getfield(Pkg.GraphType, Symbol("#101#113"))}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Iterators.Enumerate{Array{Base.VersionNumber, 1}}, getfield(Pkg.GraphType, Symbol("#101#113"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{Base.VersionNumber, Int64}, 1}, Base.Dict{Base.VersionNumber, Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(Pkg.GraphType, Symbol("#100#112")){Array{Array{Base.VersionNumber, 1}, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Pkg.GraphType, Symbol("#100#112")){Array{Array{Base.VersionNumber, 1}, 1}}}})
precompile(Tuple{typeof(Pkg.GraphType.log_event_pruned!), Pkg.GraphType.Graph, Int64, Int64})
precompile(Tuple{typeof(Pkg.GraphType.prune_graph!), Pkg.GraphType.Graph})
precompile(Tuple{Type{Base.Dict{Base.VersionNumber, Int64}}, Base.Generator{Base.Iterators.Enumerate{Array{Base.VersionNumber, 1}}, getfield(Pkg.GraphType, Symbol("#81#87"))}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Iterators.Enumerate{Array{Base.VersionNumber, 1}}, getfield(Pkg.GraphType, Symbol("#81#87"))}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Nothing, Base.VersionNumber}, Base.Set{Union{Nothing, Base.VersionNumber}}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.union!), Base.Set{Union{Nothing, Base.VersionNumber}}, Base.Set{Union{Nothing, Base.VersionNumber}}})
precompile(Tuple{typeof(Pkg.GraphType.build_eq_classes1!), Pkg.GraphType.Graph, Int64})
precompile(Tuple{typeof(Pkg.GraphType.compute_eq_classes!), Pkg.GraphType.Graph})
precompile(Tuple{getfield(Pkg.GraphType, Symbol("##simplify_graph!#121")), Bool, typeof(Pkg.GraphType.simplify_graph!), Pkg.GraphType.Graph, Base.Set{Int64}})
precompile(Tuple{typeof(Pkg.GraphType.build_eq_classes_soft1!), Pkg.GraphType.Graph, Int64})
precompile(Tuple{getfield(Pkg.GraphType, Symbol("##compute_eq_classes_soft!#88")), Bool, typeof(Pkg.GraphType.compute_eq_classes_soft!), Pkg.GraphType.Graph})
precompile(Tuple{typeof(Pkg.GraphType.log_event_greedysolved!), Pkg.GraphType.Graph, Int64, Int64})
precompile(Tuple{typeof(Pkg.Resolve.greedysolver), Pkg.GraphType.Graph})
precompile(Tuple{typeof(Pkg.Resolve.verify_solution), Array{Int64, 1}, Pkg.GraphType.Graph})
precompile(Tuple{typeof(Pkg.GraphType.log_event_maxsumsolved!), Pkg.GraphType.Graph, Int64, Int64, Int64})
precompile(Tuple{typeof(Pkg.GraphType.log_event_maxsumsolved!), Pkg.GraphType.Graph, Int64, Int64, Symbol})
precompile(Tuple{typeof(Pkg.Resolve.enforce_optimality!), Array{Int64, 1}, Pkg.GraphType.Graph})
precompile(Tuple{typeof(Pkg.Resolve.MaxSum.reset_messages!), Pkg.Resolve.MaxSum.Messages, Pkg.GraphType.Graph})
precompile(Tuple{Type{Pkg.Resolve.MaxSum.Messages}, Pkg.GraphType.Graph})
precompile(Tuple{typeof(Pkg.Resolve.MaxSum.update_solution!), Pkg.Resolve.MaxSum.SolutionTrace, Pkg.GraphType.Graph})
precompile(Tuple{typeof(Base.:(-)), Array{Pkg.Resolve.MaxSum.FieldValues.FieldValue, 1}, Array{Pkg.Resolve.MaxSum.FieldValues.FieldValue, 1}})
precompile(Tuple{typeof(Pkg.Resolve.MaxSum.update!), Int64, Pkg.GraphType.Graph, Pkg.Resolve.MaxSum.Messages})
precompile(Tuple{typeof(Pkg.Resolve.MaxSum.iterate!), Pkg.GraphType.Graph, Pkg.Resolve.MaxSum.Messages, Pkg.Resolve.MaxSum.NodePerm})
precompile(Tuple{typeof(Pkg.Resolve.MaxSum.clean_forbidden!), Pkg.GraphType.Graph, Pkg.Resolve.MaxSum.Messages})
precompile(Tuple{typeof(Pkg.Resolve.MaxSum.try_simplify_graph_soft!), Pkg.GraphType.Graph, Base.Set{Int64}})
precompile(Tuple{typeof(Pkg.Resolve.MaxSum.converge!), Pkg.GraphType.Graph, Pkg.Resolve.MaxSum.Messages, Pkg.Resolve.MaxSum.SolutionTrace, Pkg.Resolve.MaxSum.NodePerm, Pkg.Resolve.MaxSum.MaxSumParams})
precompile(Tuple{typeof(Pkg.Resolve.MaxSum.maxsum), Pkg.GraphType.Graph})
precompile(Tuple{typeof(Pkg.GraphType.log_event_maxsumtrace!), Pkg.GraphType.Graph, Int64, Int64})
precompile(Tuple{typeof(Pkg.Resolve.apply_maxsum_trace!), Pkg.GraphType.Graph, Array{Int64, 1}})
precompile(Tuple{typeof(Pkg.Resolve.trigger_failure!), Pkg.GraphType.Graph, Array{Int64, 1}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Pkg.Resolve.resolve), Pkg.GraphType.Graph})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.VersionNumber, Base.SHA1}, Base.VersionNumber})
precompile(Tuple{typeof(Pkg.Operations.load_tree_hash), Pkg.Types.Context, Pkg.Types.PackageSpec})
precompile(Tuple{typeof(Pkg.Operations.load_tree_hashes!), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Operations.resolve_versions!), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.VersionNumber, Base.Dict{String, Any}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Base.Dict{String, Any}}, Base.Dict{Base.VersionNumber, Base.Dict{String, Any}}, Base.VersionNumber})
precompile(Tuple{typeof(Pkg.Operations.load_package_data), Type{Base.UUID}, String, Array{Base.VersionNumber, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.VersionNumber, Base.Dict{String, Any}}, Base.VersionNumber})
precompile(Tuple{typeof(Pkg.Operations.load_package_data), Type{Base.UUID}, String, Pkg.Types.UpgradeLevel})
precompile(Tuple{typeof(Pkg.Operations.load_package_data), Type{Base.UUID}, String, Pkg.Types.VersionSpec})
precompile(Tuple{typeof(Pkg.Operations.load_deps), Pkg.Types.Context, Pkg.Types.PackageSpec})
precompile(Tuple{typeof(Pkg.Operations.update_manifest!), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Operations.load_urls), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{getfield(Pkg.GitTools, Symbol("##fetch#5")), Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:refspecs, :credentials), Tuple{Array{String, 1}, LibGit2.CachedCredentials}}}, typeof(Pkg.GitTools.fetch), LibGit2.GitRepo, String})
precompile(Tuple{getfield(Pkg.GitTools, Symbol("##clone#4")), String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:isbare, :credentials), Tuple{Bool, LibGit2.CachedCredentials}}}, typeof(Pkg.GitTools.clone), String, String})
precompile(Tuple{getfield(Pkg.Operations, Symbol("#69#71")){Base.UUID, String, Base.SHA1, Array{String, 1}}, LibGit2.CachedCredentials})
precompile(Tuple{typeof(Base.shred!), getfield(Pkg.Operations, Symbol("#69#71")){Base.UUID, String, Base.SHA1, Array{String, 1}}, LibGit2.CachedCredentials})
precompile(Tuple{typeof(Pkg.Operations.install_git), Pkg.Types.Context, Base.UUID, String, Base.SHA1, Array{String, 1}, Base.VersionNumber, String})
precompile(Tuple{getfield(Pkg.Operations, Symbol("##download_source#81")), Bool, typeof(Pkg.Operations.download_source), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}, Base.Dict{Base.UUID, Array{String, 1}}})
precompile(Tuple{typeof(Base.:(==)), Pkg.Display.VerInfo, Pkg.Display.VerInfo})
precompile(Tuple{typeof(Base.filter!), getfield(Pkg.Display, Symbol("#29#34")), Array{Pkg.Display.DiffEntry, 1}})
precompile(Tuple{typeof(Pkg.Display.print_diff), Pkg.Types.Context, Array{Pkg.Display.DiffEntry, 1}, Bool})
precompile(Tuple{typeof(Pkg.Display.print_project_diff), Pkg.Types.Context, Pkg.Types.EnvCache, Pkg.Types.EnvCache})
precompile(Tuple{getfield(Pkg.Types, Symbol("##write_project#44")), Bool, typeof(Pkg.Types.write_project), Pkg.Types.Project, Pkg.Types.EnvCache, Pkg.Types.EnvCache, Pkg.Types.Context})
precompile(Tuple{typeof(Base.filter!), getfield(Pkg.Display, Symbol("#35#36")), Array{Pkg.Display.DiffEntry, 1}})
precompile(Tuple{typeof(Pkg.Types.write_manifest), Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, String})
precompile(Tuple{getfield(Pkg.Types, Symbol("##write_manifest#57")), Bool, typeof(Pkg.Types.write_manifest), Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, Pkg.Types.EnvCache, Pkg.Types.EnvCache, Pkg.Types.Context})
precompile(Tuple{typeof(Pkg.Operations.backwards_compat_for_build), Pkg.Types.Context, Pkg.Types.PackageSpec, String, Bool, Bool, Int64})
precompile(Tuple{getfield(Pkg.Operations, Symbol("##build_versions#97")), Bool, Bool, typeof(Pkg.Operations.build_versions), Pkg.Types.Context, Array{Base.UUID, 1}})
precompile(Tuple{typeof(Pkg.Types.find_project_file), String})
precompile(Tuple{Type{Pkg.Types.EnvCache}, String})
precompile(Tuple{getfield(Pkg.Operations, Symbol("##add#112")), Bool, Pkg.BinaryPlatforms.MacOS, typeof(Pkg.Operations.add), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}, Array{Base.UUID, 1}})
precompile(Tuple{getfield(Pkg.API, Symbol("##add#25")), Bool, Pkg.BinaryPlatforms.MacOS, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.API.add), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Types.printpkgstyle), Base.TTY, Symbol, String, Bool})
precompile(Tuple{typeof(Pkg.Types.printpkgstyle), Base.TTY, Symbol, String})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.TTY, String})
precompile(Tuple{typeof(Base.union!), Base.Set{Base.UUID}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.Fixed}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Vararg{Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, N} where N})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), typeof(Pkg.TOML.parse), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Pkg.Operations.load_package_data_raw), Type{T} where T, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.Grisu.fastfixedtoa), Float64, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64, Array{UInt8, 1}, Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.power_by_squaring), Int64, Int64})
precompile(Tuple{typeof(Base.Grisu._show), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Vararg{Base.BitArray{2}, N} where N})
precompile(Tuple{typeof(Pkg.Resolve.MaxSum.decimate1!), Int64, Pkg.GraphType.Graph, Pkg.Resolve.MaxSum.SolutionTrace, Pkg.Resolve.MaxSum.Messages})
precompile(Tuple{typeof(Pkg.Resolve.MaxSum.decimate!), Pkg.GraphType.Graph, Pkg.Resolve.MaxSum.SolutionTrace, Pkg.Resolve.MaxSum.Messages, Int64})
precompile(Tuple{getfield(Pkg.Operations, Symbol("#kw##download_artifacts")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Operations.download_artifacts), Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{getfield(Pkg.Operations, Symbol("#kw##download_artifacts")), NamedTuple{(:platform, :verbose), Tuple{Pkg.BinaryPlatforms.MacOS, Bool}}, typeof(Pkg.Operations.download_artifacts), Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_all_artifacts_installed#43")), Pkg.BinaryPlatforms.Platform, Nothing, Bool, Bool, typeof(Pkg.Artifacts.ensure_all_artifacts_installed), String})
precompile(Tuple{getfield(Pkg.Operations, Symbol("##download_artifacts#78")), Pkg.BinaryPlatforms.MacOS, Bool, typeof(Pkg.Operations.download_artifacts), Array{String, 1}})
precompile(Tuple{getfield(Pkg.Operations, Symbol("##download_artifacts#73")), Pkg.BinaryPlatforms.MacOS, Bool, typeof(Pkg.Operations.download_artifacts), Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union{Nothing, String}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Pkg.Operations.source_path), Tuple{Base.Broadcast.Extruded{Array{Pkg.Types.PackageSpec, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, String}, 1}, Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Pkg.Operations.source_path), Tuple{Base.Broadcast.Extruded{Array{Pkg.Types.PackageSpec, 1}, Tuple{Bool}, Tuple{Int64}}}}, Nothing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, String}, 1}, Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Pkg.Operations.source_path), Tuple{Base.Broadcast.Extruded{Array{Pkg.Types.PackageSpec, 1}, Tuple{Bool}, Tuple{Int64}}}}, String, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{String, 1}, Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Pkg.Operations.source_path), Tuple{Base.Broadcast.Extruded{Array{Pkg.Types.PackageSpec, 1}, Tuple{Bool}, Tuple{Int64}}}}, String, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Pkg.Operations.source_path), Tuple{Base.Broadcast.Extruded{Array{Pkg.Types.PackageSpec, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##ensure_artifact_installed")), NamedTuple{(:platform, :verbose), Tuple{Pkg.BinaryPlatforms.MacOS, Bool}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Random.make_seed)})
precompile(Tuple{Type{Random.MersenneTwister}, Nothing})
precompile(Tuple{typeof(Random.default_rng), Int64})
precompile(Tuple{typeof(Random.randstring), Int64})
precompile(Tuple{typeof(Pkg.Operations.install_archive), Array{String, 1}, Base.SHA1, String})
precompile(Tuple{getfield(Pkg.Operations, Symbol("#84#87")){Bool, Pkg.Types.Context, Base.Dict{Base.UUID, Array{String, 1}}, Base.Channel{Any}, Base.Channel{Any}}})
precompile(Tuple{typeof(Base._all), typeof(Base.identity), Base.Generator{Array{Pkg.Display.DiffEntry, 1}, getfield(Pkg.Display, Symbol("#37#38"))}, Base.Colon})
precompile(Tuple{typeof(Pkg.Display.:(≈)), Pkg.Display.VerInfo, Pkg.Display.VerInfo})
precompile(Tuple{typeof(Pkg.Display.vstring), Pkg.Types.Context, Pkg.Display.VerInfo})
precompile(Tuple{typeof(Pkg.Display.print_diff), Base.TTY, Pkg.Types.Context, Array{Pkg.Display.DiffEntry, 1}, Bool})
precompile(Tuple{getfield(Pkg.TOML, Symbol("##_print#9")), Int64, Bool, Bool, Function, typeof(Pkg.TOML._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}, Array{String, 1}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#kw##_print")), NamedTuple{(:indent, :first_block, :sorted, :by), Tuple{Int64, Bool, Bool, getfield(Pkg.Types, Symbol("#40#42"))}}, typeof(Pkg.TOML._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Base.UUID}, Array{String, 1}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("##_print#9")), Int64, Bool, Bool, Function, typeof(Pkg.TOML._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Base.UUID}, Array{String, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{typeof(Base.print_to_string), Base.VersionNumber})
precompile(Tuple{getfield(Pkg.Types, Symbol("#entry!#52")){getfield(Pkg.Types, Symbol("#entry!#50#53"))}, Base.Dict{String, Any}, String, Base.VersionNumber})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#kw##_print")), NamedTuple{(:indent, :sorted, :by), Tuple{Int64, Bool, typeof(Base.identity)}}, typeof(Pkg.TOML._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}, Array{String, 1}})
precompile(Tuple{getfield(Pkg.Operations, Symbol("#visit#96")){Pkg.Types.Context, Base.Dict{Base.UUID, Int64}, Array{Base.UUID, 1}}, Base.UUID})
precompile(Tuple{typeof(Base.foreach), getfield(Pkg.Operations, Symbol("#visit#96")){Pkg.Types.Context, Base.Dict{Base.UUID, Int64}, Array{Base.UUID, 1}}, Array{Base.UUID, 1}})
precompile(Tuple{getfield(Base, Symbol("##run#565")), Bool, typeof(Base.run), Base.Cmd, Tuple{Base.DevNull, Base.DevNull, Base.DevNull}})
precompile(Tuple{typeof(Base.run), Base.Cmd, Tuple{Base.DevNull, Base.DevNull, Base.DevNull}})
precompile(Tuple{typeof(Base.CoreLogging.min_enabled_level), Logging.ConsoleLogger})
precompile(Tuple{typeof(Base.:(-)), Base.CoreLogging.LogLevel, Int64})
precompile(Tuple{getfield(Base, Symbol("##run#565")), Bool, typeof(Base.run), Base.Cmd})
precompile(Tuple{typeof(Base.run), Base.Cmd})
precompile(Tuple{typeof(Base.string), String, Base.VersionNumber})
precompile(Tuple{typeof(REPL.LineEdit.edit_move_left), REPL.LineEdit.MIState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#148#200")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s627, #s626} where #s626<:Integer where #s627<:Integer, AbstractString})
precompile(Tuple{Type{Core.Compiler.Signature}, Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(Unitful, Symbol("##s31#57")), Any, Any})
precompile(Tuple{typeof(Base.divgcd), Int64, Int64})
precompile(Tuple{typeof(Base.:(*)), Base.Rational{Int64}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), (), A} where A}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{#s64} where #s64<:(AbstractArray{E, N} where N)} where E)
precompile(Tuple{typeof(Base.sort!), Array{Unitful.Unit{U, D} where D where U, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Unitful, Symbol("#30#33"))}})
precompile(Tuple{typeof(Base.sort!), Array{Unitful.Unit{U, D} where D where U, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Unitful, Symbol("#30#33"))}, Array{Unitful.Unit{U, D} where D where U, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Unitful.Unit{U, D} where D where U, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Unitful, Symbol("#31#34"))}})
precompile(Tuple{typeof(Base.sort!), Array{Unitful.Unit{U, D} where D where U, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Unitful, Symbol("#31#34"))}, Array{Unitful.Unit{U, D} where D where U, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Unitful.Unit{U, D} where D where U, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Unitful, Symbol("#32#35"))}})
precompile(Tuple{typeof(Base.sort!), Array{Unitful.Unit{U, D} where D where U, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Array{Unitful.Unit{U, D} where D where U, 1}})
precompile(Tuple{typeof(Base.:(+)), Base.Rational{Int64}, Base.Rational{Int64}})
precompile(Tuple{getfield(Unitful, Symbol("##s30#29")), Any, Any, Any})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Unitful.name), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(Unitful.dimtype), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{Type{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)),)}}})
precompile(Tuple{getfield(Unitful, Symbol("##s18#8")), Any, Any, Any})
precompile(Tuple{Type{Array{T, 1}}} where T)
precompile(Tuple{Type{Array{T, 1}}, UndefInitializer, Int64} where T)
precompile(Tuple{typeof(Base.append!), AbstractArray{T, 1} where T, Any})
precompile(Tuple{Type{Base.IteratorSize}, Any})
precompile(Tuple{Type{Base.IteratorSize}, Type})
precompile(Tuple{typeof(Base._append!), Any, Union{Base.HasLength, Base.HasShape{N} where N}, Any})
precompile(Tuple{typeof(Base.length), Array{T, N} where N where T})
precompile(Tuple{typeof(Base.lastindex), AbstractArray{T, N} where N where T})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, AbstractArray{T, 1} where T})
precompile(Tuple{typeof(Base.axes1), AbstractArray{T, N} where N where T})
precompile(Tuple{typeof(Base.axes), Any})
precompile(Tuple{typeof(Base.size), Array{T, 1} where T})
precompile(Tuple{typeof(Base.map), Any, Tuple{Any}})
precompile(Tuple{Type{Base.OneTo{T} where T<:Integer}, Int64})
precompile(Tuple{typeof(Base.last), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.resize!), Array{T, 1} where T, Integer})
precompile(Tuple{typeof(Base._growend!), Array{T, 1} where T, Integer})
precompile(Tuple{typeof(Base.unsafe_convert), Type{UInt64}, UInt64})
precompile(Tuple{typeof(Base.Iterators.zip), Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Is} where Is<:Tuple)
precompile(Tuple{Type{Base.Iterators.Zip{Is}}, Any} where Is<:Tuple)
precompile(Tuple{typeof(Base.convert), Type{T}, T} where T<:Tuple{Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Is} where Is<:Tuple})
precompile(Tuple{typeof(Base.getproperty), Any, Symbol})
precompile(Tuple{typeof(Base.map), Any, Tuple{Any, Any}})
precompile(Tuple{getfield(Base.Iterators, Symbol("#3#4")), Any})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Any, Any})
precompile(Tuple{typeof(Base.Iterators._zip_isdone), Any, Any})
precompile(Tuple{typeof(Base.tail), Tuple})
precompile(Tuple{typeof(Base.argtail), Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.isdone), Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Tuple{}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Tuple{Base.Missing}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Tuple{Base.Missing}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Tuple{Base.Missing, Base.Missing}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Tuple{Base.Missing, Base.Missing}}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_some), Any, Any, Tuple{T, Vararg{Any, N} where N}, T} where T)
precompile(Tuple{typeof(Base.Iterators._zip_iterate_some), Any, Any, Tuple{Any, Vararg{Any, N} where N}, Any})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_interleave), Any, Any, Any})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple, Int64, Any})
precompile(Tuple{typeof(Base.setindex!), Array{T, N} where N, Any, Int64} where T)
precompile(Tuple{typeof(Base.convert), Type{T}, T} where T)
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Is} where Is<:Tuple, Any})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.tail), Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{Type{NamedTuple{names, T} where T<:Tuple}, Tuple} where names)
precompile(Tuple{Type{NamedTuple{names, T}}, T} where T<:Tuple where names)
precompile(Tuple{getfield(Base, Symbol("#kw##sort!")), Any, typeof(Base.sort!), AbstractArray{T, 1} where T})
precompile(Tuple{typeof(Base.haskey), NamedTuple{names, T} where T<:Tuple where names, Union{Integer, Symbol}})
precompile(Tuple{typeof(Base.Sort.defalg), AbstractArray{T, N} where N where T})
precompile(Tuple{typeof(Base.getindex), NamedTuple{names, T} where T<:Tuple where names, Symbol})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{an, T} where T<:Tuple, Union{Type{NamedTuple{bn, T} where T<:Tuple}, NamedTuple{bn, T} where T<:Tuple}} where bn where an)
precompile(Tuple{typeof(Base.map), Any, Tuple{}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sort!#7")), Base.Sort.Algorithm, Any, Any, Union{Nothing, Bool}, Base.Order.Ordering, typeof(Base.sort!), AbstractArray{T, 1} where T})
precompile(Tuple{Type{Base.Order.By{T} where T}, T} where T)
precompile(Tuple{Type{Base.Order.By{T}}, Any} where T)
precompile(Tuple{typeof(Base.sort!), AbstractArray{T, 1} where T, Base.Sort.Algorithm, Base.Order.Ordering})
precompile(Tuple{typeof(Base.axes), AbstractArray{T, N}, Any} where N where T)
precompile(Tuple{typeof(Base.sort!), AbstractArray{T, 1} where T, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.Ordering})
precompile(Tuple{typeof(Base.similar), Array{T, N} where N, Int64} where T)
precompile(Tuple{typeof(Base.sort!), AbstractArray{T, 1} where T, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.Ordering, Any})
precompile(Tuple{typeof(Base.isempty), AbstractArray{T, N} where N where T})
precompile(Tuple{typeof(Base.iterate), Array{T, N} where N where T})
precompile(Tuple{typeof(Base.iterate), Array{T, N} where N where T, Any})
precompile(Tuple{typeof(Base.rem), Int64, Type{UInt64}})
precompile(Tuple{typeof(Base.:(-)), UInt64, Int64})
precompile(Tuple{typeof(Base.:(<)), UInt64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{T, N} where N where T, Int64})
precompile(Tuple{typeof(Base.:(//)), Int64, Int64})
precompile(Tuple{typeof(Unitful.name), Unitful.Dimension{D}} where D)
precompile(Tuple{typeof(Unitful.power), Unitful.Dimension{:Length}})
precompile(Tuple{typeof(Base.:(!=)), Base.Rational{Int64}, Int64})
precompile(Tuple{Type{Unitful.Dimension{:Length}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.push!), Array{T, 1}, Any} where T)
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), (), nothing}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Unitful.name), Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Unitful.dimtype), Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{Type{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}}})
precompile(Tuple{typeof(Base.sort!), Array{Unitful.Dimension{D} where D, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Unitful, Symbol("#9#11"))}})
precompile(Tuple{typeof(Base.sort!), Array{Unitful.Dimension{D} where D, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Unitful, Symbol("#9#11"))}, Array{Unitful.Dimension{D} where D, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Unitful.Dimension{D} where D, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Unitful, Symbol("#10#12"))}})
precompile(Tuple{typeof(Base.sort!), Array{Unitful.Dimension{D} where D, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Array{Unitful.Dimension{D} where D, 1}})
precompile(Tuple{getfield(Unitful, Symbol("##s18#8")), Any, Any, Any})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Dimension{D} where D, 1}, Base.HasLength, Tuple{Unitful.Dimension{:Current}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Current}}})
precompile(Tuple{typeof(Unitful.name), Unitful.Dimension{:Current}})
precompile(Tuple{Type{Unitful.Dimension{:Current}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Dimension{D} where D, 1}, Base.HasLength, Tuple{Unitful.Dimension{:Length}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Length}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Unitful.Dimension{:Current}, Unitful.Dimension{:Length}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{Type{Core.Compiler.Signature}, Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{Type{Core.Compiler.Signature}, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), (), A} where A}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Unitful.name), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Unitful.dimtype), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{Type{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}}})
precompile(Tuple{typeof(Base.length), Array{Unitful.Dimension{D} where D, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Unitful.Dimension{D} where D, 1}})
precompile(Tuple{typeof(Base.resize!), Array{Unitful.Dimension{D} where D, 1}, Int64})
precompile(Tuple{Type{Unitful.Dimension{:Time}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), (), nothing}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Dimension{D} where D, 1}, Base.HasLength, Tuple{Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Unitful.Dimension{:Length}, Unitful.Dimension{:Time}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{Type{Core.Compiler.Signature}, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{Type{Core.Compiler.Signature}, Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Nothing, Union{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), U}, Unitful.Level{L, S, Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), U}} where S where L} where U where T}, 1}, Base.IndexLinear, Array{Nothing, 1}})
precompile(Tuple{Type{CoilGun.ProjectileCoilEvent}})
precompile(Tuple{typeof(CoilGun.numberLayers), CoilGun.Coil})
precompile(Tuple{typeof(CoilGun.numberWindings), CoilGun.Coil})
precompile(Tuple{typeof(CoilGun.wireLength), CoilGun.Coil})
precompile(Tuple{typeof(CoilGun.area), CoilGun.Coil})
precompile(Tuple{typeof(CoilGun.resistance), CoilGun.Coil})
precompile(Tuple{typeof(CoilGun.CoilGunDefaults.transform_scenario), CoilGun.CoilGunDefaults.UIScenario})
precompile(Tuple{typeof(CoilGun.solveScenario), CoilGun.Scenario})
precompile(Tuple{typeof(CoilGun.dictionary_api), Base.Dict{Any, Any}})
precompile(Tuple{typeof(CoilGun.apply_json_mutations), CoilGun.CoilGunDefaults.UIScenario, Base.Dict{Any, Any}})
precompile(Tuple{getfield(CoilGun, Symbol("#20#21")){CoilGun.CoilGunDefaults.UIScenario, Base.Dict{Any, Any}}, Symbol})
precompile(Tuple{typeof(Base.map), getfield(CoilGun, Symbol("#20#21")){CoilGun.CoilGunDefaults.UIScenario, Base.Dict{Any, Any}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{CoilGun.CoilGunDefaults.UIScenario}, CoilGun.IronProjectile, CoilGun.Barrel, CoilGun.Coil, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Int64})
precompile(Tuple{typeof(Base.getproperty), CoilGun.ProjectilePhysical, Symbol})
precompile(Tuple{getfield(Unitful, Symbol("##s31#97")), Any, Any, Any})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Unitful.dimension), Type{Float64}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Base.Rational{Int64}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#1#2")){Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}}})
precompile(Tuple{typeof(CoilGun.CoilGenerator), Int64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(CoilGun.CoilGunDefaults, Symbol("#1#3")), Array{CoilGun.Coil, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Nothing, 1}, Nothing, Base.Generator{Array{CoilGun.Coil, 1}, getfield(CoilGun.CoilGunDefaults, Symbol("#1#3"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{CoilGun.Coil, 1}, getfield(CoilGun.CoilGunDefaults, Symbol("#1#3"))}})
precompile(Tuple{typeof(Base.setproperty!), CoilGun.ProjectileCoilEvent, Symbol, Array{Nothing, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(CoilGun.CoilGunDefaults, Symbol("#2#4")), Array{CoilGun.Coil, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Nothing, 1}, Nothing, Base.Generator{Array{CoilGun.Coil, 1}, getfield(CoilGun.CoilGunDefaults, Symbol("#2#4"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{CoilGun.Coil, 1}, getfield(CoilGun.CoilGunDefaults, Symbol("#2#4"))}})
precompile(Tuple{typeof(Base.getindex), Array{CoilGun.Coil, 1}, Int64})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), Function, Function, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.trunc), Type{Int64}, Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.convert), Type{Union{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), U}, Unitful.Level{L, S, Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), U}} where S where L} where U where T}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Unitful.name), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Unitful.dimtype), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{Type{Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Dimension{D} where D, 1}, Base.HasLength, Tuple{Unitful.Dimension{:Current}, Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Current}, Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Unitful.Dimension{:Current}, Unitful.Dimension{:Time}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Current}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Unitful.Dimension{:Length}, Unitful.Dimension{:Current}})
precompile(Tuple{typeof(Unitful.name), Unitful.Dimension{:Mass}})
precompile(Tuple{Type{Unitful.Dimension{:Mass}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Unitful.Dimension{:Length}, Unitful.Dimension{:Length}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=4, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=4, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{getfield(Unitful, Symbol("##s31#48")), Any, Any, Any, Any, Type{T} where T, Any, Any})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#49#50")){Int64}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), (), A} where A}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), (), nothing}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Base.Val{2}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, Base.Irrational{:π}})
precompile(Tuple{typeof(Base.convert), Type{Union{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), U}, Unitful.Level{L, S, Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), U}} where S where L} where U where T}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1)),), (), A} where A}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)),)}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1)),), (), nothing}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=4, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=4, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.convert), Type{Union{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), U}, Unitful.Level{L, S, Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), U}} where S where L} where U where T}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{Type{CoilGun.Scenario}, CoilGun.IronProjectile, CoilGun.Barrel, Array{CoilGun.Coil, 1}, CoilGun.ProjectileCoilEvent, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Unitful.dimension), Type{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Dimension{D} where D, 1}, Base.HasLength, Tuple{Unitful.Dimension{:Current}, Unitful.Dimension{:Length}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Current}, Unitful.Dimension{:Length}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.map), Function, Tuple{}})
precompile(Tuple{Type{Unitful.FreeUnits{(), (), A} where A}})
precompile(Tuple{typeof(Base.getindex), Tuple{}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(), (), nothing}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, typeof(Unitful.ustrip)})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, typeof(Unitful.ustrip)})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Dimension{D} where D, 1}, Base.HasLength, Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, typeof(Unitful.ustrip)})
precompile(Tuple{typeof(Base.vect), Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Int64, Int64, Float64, Int64}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, typeof(Unitful.ustrip)})
precompile(Tuple{getfield(DiffEqBase, Symbol("##ODEProblem#233")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{DiffEqBase.ODEProblem{uType, tType, isinplace, P, F, K, PT} where PT where K where F where P where isinplace where tType where uType}, Function, Array{Float64, 1}, Tuple{Float64, Float64}, CoilGun.Scenario})
precompile(Tuple{Type{DiffEqBase.ODEProblem{uType, tType, isinplace, P, F, K, PT} where PT where K where F where P where isinplace where tType where uType}, Function, Array{Float64, 1}, Tuple{Float64, Float64}, CoilGun.Scenario})
precompile(Tuple{typeof(Base.convert), Type{DiffEqBase.ODEFunction{iip, F, TMM, Ta, Tt, TJ, JVP, VJP, JP, SP, TW, TWt, TPJ, S, TCV} where TCV where S where TPJ where TWt where TW where SP where JP where VJP where JVP where TJ where Tt where Ta where TMM where F where iip}, Function})
precompile(Tuple{Type{NamedTuple{(:analytic, :tgrad, :jac, :jvp, :vjp, :Wfact, :Wfact_t, :paramjac, :syms, :colorvec), T} where T<:Tuple}, Tuple{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{getfield(DiffEqBase, Symbol("##ODEFunction#98")), Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:analytic, :tgrad, :jac, :jvp, :vjp, :Wfact, :Wfact_t, :paramjac, :syms, :colorvec), Tuple{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}}, Type{DiffEqBase.ODEFunction{iip, F, TMM, Ta, Tt, TJ, JVP, VJP, JP, SP, TW, TWt, TPJ, S, TCV} where TCV where S where TPJ where TWt where TW where SP where JP where VJP where JVP where TJ where Tt where Ta where TMM where F where iip}, Function})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:analytic, :tgrad, :jac, :jvp, :vjp, :Wfact, :Wfact_t, :paramjac, :syms, :colorvec), Tuple{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Type{DiffEqBase.ODEFunction{iip, F, TMM, Ta, Tt, TJ, JVP, VJP, JP, SP, TW, TWt, TPJ, S, TCV} where TCV where S where TPJ where TWt where TW where SP where JP where VJP where JVP where TJ where Tt where Ta where TMM where F where iip}, Function})
precompile(Tuple{getfield(DiffEqBase, Symbol("#1#2")){DataType, DataType, DataType, DataType, DataType, DataType}, Method})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.MethodList, getfield(DiffEqBase, Symbol("#1#2")){DataType, DataType, DataType, DataType, DataType, DataType}}})
precompile(Tuple{typeof(DiffEqBase.numargs), Function})
precompile(Tuple{typeof(DiffEqBase.isinplace), Function, Int64})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(Base.methods), Any, Any})
precompile(Tuple{typeof(DiffEqBase.num_types_in_tuple), Type{T} where T})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.MethodList, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.MethodList, getfield(DiffEqBase, Symbol("#1#2")){DataType, DataType, DataType, DataType, DataType, DataType}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Base.MethodList, getfield(DiffEqBase, Symbol("#1#2")){DataType, DataType, DataType, DataType, DataType, DataType}}, Int64})
precompile(Tuple{typeof(Base._maximum), Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:analytic, :tgrad, :jac, :jvp, :vjp, :Wfact, :Wfact_t, :paramjac, :syms, :colorvec), Tuple{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Type{DiffEqBase.ODEFunction{true, true, TMM, Ta, Tt, TJ, JVP, VJP, JP, SP, TW, TWt, TPJ, S, TCV} where TCV where S where TPJ where TWt where TW where SP where JP where VJP where JVP where TJ where Tt where Ta where TMM}, Function})
precompile(Tuple{getfield(DiffEqBase, Symbol("##_#88")), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Type{DiffEqBase.ODEFunction{true, true, TMM, Ta, Tt, TJ, JVP, VJP, JP, SP, TW, TWt, TPJ, S, TCV} where TCV where S where TPJ where TWt where TW where SP where JP where VJP where JVP where TJ where Tt where Ta where TMM}, typeof(CoilGun.coilProblem!)})
precompile(Tuple{Type{DiffEqBase.ODEProblem{uType, tType, isinplace, P, F, K, PT} where PT where K where F where P where isinplace where tType where uType}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, Tuple{Float64, Float64}, CoilGun.Scenario})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:u0, :p), Tuple{Array{Float64, 1}, CoilGun.Scenario}}}, Type{NamedTuple{(:alg_hints,), Tuple{Array{Symbol, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, CoilGun.Scenario, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Core.Compiler._typename), TypeVar})
precompile(Tuple{typeof(DiffEqBase.__parameterless_type), Type{T} where T})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{getfield(DiffEqBase, Symbol("##s178#488")), Any, Any})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Symbol, Nothing}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, getfield(Base, Symbol("#85#86"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, getfield(Base, Symbol("#85#86"))}})
precompile(Tuple{typeof(Base.setdiff), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DiffEqBase, Symbol("#489#490")), Array{Symbol, 1}})
precompile(Tuple{getfield(DiffEqBase, Symbol("#489#490")), Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Symbol, 1}, getfield(DiffEqBase, Symbol("#489#490"))}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Symbol, 1}, getfield(DiffEqBase, Symbol("#489#490"))}, Int64})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:f, :u0, :tspan, :p, :problem_type), Tuple{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, Tuple{Float64, Float64}, CoilGun.Scenario, DiffEqBase.StandardODEProblem}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:f, :u0, :tspan, :p, :problem_type), Tuple{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, Tuple{Float64, Float64}, CoilGun.Scenario, DiffEqBase.StandardODEProblem}}}, Type{NamedTuple{(:f, :u0, :p, :tspan), Tuple{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario, Tuple{Float64, Float64}}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(DiffEqBase.has_kwargs), Type{DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:default_set, :second_time), Tuple{Bool, Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Sundials, Symbol("##CVODE_BDF#12")), Symbol, Symbol, Int64, Int64, Int64, Int64, Bool, Int64, Int64, Int64, Int64, Int64, Nothing, Nothing, Int64, Type{Sundials.CVODE_BDF{Method, LinearSolver, P, PS} where PS where P where LinearSolver where Method}})
precompile(Tuple{Type{Sundials.CVODE_BDF{Method, LinearSolver, P, PS} where PS where P where LinearSolver where Method}})
precompile(Tuple{Type{Sundials.CVODE_BDF{:Newton, :Dense, Nothing, Nothing}}, Int64, Int64, Int64, Bool, Int64, Int64, Int64, Int64, Int64, Nothing, Nothing, Int64})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:default_set,), Tuple{Bool}}}, Type{NamedTuple{(:second_time,), Tuple{Bool}}}})
precompile(Tuple{Type{Base.Val{x} where x}, Bool})
precompile(Tuple{Type{Base.Val{true}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Dimensions{()}})
precompile(Tuple{getfield(ForwardDiff, Symbol("##s31#61")), Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:method,), Tuple{Symbol}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.OneTo{Int64}, 1}}})
precompile(Tuple{Type{Core.Compiler.Signature}, Distances.SqEuclidean, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{Type{Base.Val{false}}})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nloops")), LineNumberNode, Module, Any, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_arith), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_conditional), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve), Expr})
precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nexprs")), LineNumberNode, Module, Int64, Expr})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@ncall")), LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Val{x} where x}, Symbol})
precompile(Tuple{Type{Base.Val{:S}}})
precompile(Tuple{Type{Base.Val{:V}}})
precompile(Tuple{Type{Base.Val{:done}}})
precompile(Tuple{Type{Core.Compiler.Signature}, Distances.Euclidean, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64})
precompile(Tuple{Type{StaticArrays.Size{(0,)}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s35#12")), Any, Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{0}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{0}}})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s35#6")), Any, Any, Any, Any, Any, Type{T} where T, Type{T} where T, Type{T} where T, Any})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), getfield(StaticArrays, Symbol("#7#8")), Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{0}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{0}}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(0,)}})
precompile(Tuple{typeof(StaticArrays._axes), StaticArrays.Size{(0,)}})
precompile(Tuple{typeof(Base.hasfield), Type{DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}}, Symbol})
precompile(Tuple{typeof(Base.hasfield), Type{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Iterators.Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:alg_hints,), Tuple{Array{Symbol, 1}}}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:u0, :p, :alg_hints), Tuple{Array{Float64, 1}, CoilGun.Scenario, Array{Symbol, 1}}}}, Symbol})
precompile(Tuple{getfield(DiffEqBase, Symbol("##get_concrete_problem#471")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:u0, :p, :alg_hints), Tuple{Array{Float64, 1}, CoilGun.Scenario, Array{Symbol, 1}}}}, typeof(DiffEqBase.get_concrete_problem), DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Bool})
precompile(Tuple{typeof(DifferentialEquations.get_tolerance_level), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(DifferentialEquations.callbacks_exists), Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(DifferentialEquations, Symbol("##default_algorithm#3")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:second_time,), Tuple{Bool}}}, typeof(DifferentialEquations.default_algorithm), DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:default_set, :second_time), Tuple{Bool, Bool}}, Array{Any, 1}})
precompile(Tuple{getfield(DifferentialEquations, Symbol("##__solve#1")), Bool, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:second_time,), Tuple{Bool}}}, typeof(DiffEqBase.__solve), DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Nothing})
precompile(Tuple{getfield(DiffEqBase, Symbol("#460#461")){DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Tuple{}}})
precompile(Tuple{getfield(DiffEqBase, Symbol("##solve_call#459")), Bool, Base.Iterators.Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:alg_hints,), Tuple{Array{Symbol, 1}}}}, typeof(DiffEqBase.solve_call), DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}})
precompile(Tuple{getfield(DiffEqBase, Symbol("#kw##solve")), NamedTuple{(:alg_hints,), Tuple{Array{Symbol, 1}}}, typeof(DiffEqBase.solve), DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}})
precompile(Tuple{typeof(Base.get), Base.Iterators.Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:alg_hints,), Tuple{Array{Symbol, 1}}}}, Symbol, Bool})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Iterators.Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:alg_hints,), Tuple{Array{Symbol, 1}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:default_set, :second_time), Tuple{Bool, Bool}}}, Type{NamedTuple{(:alg_hints,), Tuple{Array{Symbol, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:default_set,), Tuple{Bool}}}, Type{NamedTuple{(:second_time, :alg_hints), Tuple{Bool, Array{Symbol, 1}}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:second_time, :alg_hints), Tuple{Bool, Array{Symbol, 1}}}}})
precompile(Tuple{getfield(DifferentialEquations, Symbol("##default_algorithm#3")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:second_time, :alg_hints), Tuple{Bool, Array{Symbol, 1}}}}, typeof(DifferentialEquations.default_algorithm), DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:default_set, :second_time, :alg_hints), Tuple{Bool, Bool, Array{Symbol, 1}}}, Array{Any, 1}})
precompile(Tuple{getfield(DifferentialEquations, Symbol("##__solve#1")), Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:second_time, :alg_hints), Tuple{Bool, Array{Symbol, 1}}}}, typeof(DiffEqBase.__solve), DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, Nothing})
precompile(Tuple{getfield(DiffEqBase, Symbol("#kw##__solve")), NamedTuple{(:alg_hints,), Tuple{Array{Symbol, 1}}}, typeof(DiffEqBase.__solve), DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Symbol, 1}, Symbol})
precompile(Tuple{getfield(OrdinaryDiffEq, Symbol("##Rosenbrock23#103")), Int64, Bool, Type{T} where T, DiffEqBase.DefaultLinSolve, Type{OrdinaryDiffEq.Rosenbrock23{CS, AD, F, FDT} where FDT where F where AD where CS}})
precompile(Tuple{Type{OrdinaryDiffEq.Rosenbrock23{0, false, DiffEqBase.DefaultLinSolve, DataType}}, DiffEqBase.DefaultLinSolve, Type{T} where T})
precompile(Tuple{typeof(OrdinaryDiffEq.AutoTsit5), OrdinaryDiffEq.Rosenbrock23{0, false, DiffEqBase.DefaultLinSolve, DataType}})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{getfield(OrdinaryDiffEq, Symbol("##Rodas4#117")), Int64, Bool, Type{T} where T, DiffEqBase.DefaultLinSolve, Type{OrdinaryDiffEq.Rodas4{CS, AD, F, FDT} where FDT where F where AD where CS}})
precompile(Tuple{Type{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}}, DiffEqBase.DefaultLinSolve, Type{T} where T})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:default_set, :second_time, :alg_hints), Tuple{Bool, Bool, Array{Symbol, 1}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:default_set, :second_time, :alg_hints), Tuple{Bool, Bool, Array{Symbol, 1}}}, NamedTuple{(), Tuple{}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Bool, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:check,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{StaticArrays.Dynamic, 1}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{StaticArrays.Dynamic, StaticArrays.Dynamic}})
precompile(Tuple{Type{Tuple}, StaticArrays.Size{(StaticArrays.Dynamic(), StaticArrays.Dynamic())}})
precompile(Tuple{getfield(Base, Symbol("##s66#120")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:initially_zero, :restart, :maxiter, :tol), Tuple{Bool, Int64, Int64, Float64}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.push!), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Float64})
precompile(Tuple{typeof(DiffEqBase.prob2dtmin), Tuple{Float64, Float64}, Float64, Bool})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(RecursiveArrayTools.copyat_or_push!), Array{Array{Float64, 1}, 1}, Int64, Array{Float64, 1}, Type{Base.Val{true}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Array{Array{Float64, 1}, 1}, typeof(RecursiveArrayTools.recursivecopy)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Array{Float64, 1}, 1}, Base.Generator{Array{Array{Float64, 1}, 1}, typeof(RecursiveArrayTools.recursivecopy)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(RecursiveArrayTools.copyat_or_push!), Array{Array{Array{Float64, 1}, 1}, 1}, Int64, Array{Array{Float64, 1}, 1}, Type{Base.Val{true}}})
precompile(Tuple{getfield(OrdinaryDiffEq, Symbol("##__init#406")), Tuple{}, Tuple{}, Tuple{}, Nothing, Bool, Bool, Bool, Bool, Nothing, Bool, Bool, Float64, Nothing, Float64, Bool, Bool, Base.Rational{Int64}, Nothing, Nothing, Base.Rational{Int64}, Int64, Int64, Base.Rational{Int64}, Base.Rational{Int64}, Bool, Int64, Nothing, Nothing, Int64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), Bool, Bool, Bool, Bool, Bool, Bool, Bool, Int64, String, typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), Nothing, Bool, Bool, Bool, Bool, OrdinaryDiffEq.DefaultInit, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default_set, :second_time, :alg_hints), Tuple{Bool, Bool, Array{Symbol, 1}}}}, typeof(DiffEqBase.__init), DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, Tuple{}, Tuple{}, Tuple{}, Type{Base.Val{true}}})
precompile(Tuple{getfield(DiffEqBase, Symbol("#kw##__init")), NamedTuple{(:default_set, :second_time, :alg_hints), Tuple{Bool, Bool, Array{Symbol, 1}}}, typeof(DiffEqBase.__init), DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, Tuple{}, Tuple{}, Tuple{}, Type{Base.Val{true}}})
precompile(Tuple{getfield(OrdinaryDiffEq, Symbol("##__solve#405")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default_set, :second_time, :alg_hints), Tuple{Bool, Bool, Array{Symbol, 1}}}}, typeof(DiffEqBase.__solve), DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}})
precompile(Tuple{getfield(DiffEqBase, Symbol("#kw##__solve")), NamedTuple{(:default_set, :second_time, :alg_hints), Tuple{Bool, Bool, Array{Symbol, 1}}}, typeof(DiffEqBase.__solve), DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}})
precompile(Tuple{typeof(Base.throw_boundserror), LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Bool}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.throwdm), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(ArrayInterface.zeromatrix), Array{Float64, 1}})
precompile(Tuple{typeof(Base.similar), Array{Float64, 1}, Type{T} where T})
precompile(Tuple{typeof(OrdinaryDiffEq.constvalue), Type{T} where T})
precompile(Tuple{typeof(OrdinaryDiffEq.alg_cache), OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, Array{Float64, 1}, Array{Float64, 1}, Type{T} where T, Type{T} where T, Type{T} where T, Array{Float64, 1}, Array{Float64, 1}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, Float64, Float64, CoilGun.Scenario, Bool, Base.Val{true}})
precompile(Tuple{typeof(DiffEqBase.value), Type{T} where T})
precompile(Tuple{typeof(OrdinaryDiffEq.Rodas4Tableau), Type{T} where T, Type{T} where T})
precompile(Tuple{typeof(Base.convert), Type{Float64}, Base.Rational{Int64}})
precompile(Tuple{Type{OrdinaryDiffEq.RodasTableau{T, T2} where T2 where T}, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Complex{Float64}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{Type{FiniteDiff.GradientCache{CacheType1, CacheType2, CacheType3, CacheType4, fdtype, returntype, inplace} where inplace where returntype where fdtype where CacheType4 where CacheType3 where CacheType2 where CacheType1}, Array{Float64, 1}, Float64, Type{T} where T, Type{T} where T, Type{T} where T})
precompile(Tuple{Type{FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64})
precompile(Tuple{typeof(OrdinaryDiffEq.sparsity_colorvec), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Base.Complex{Float64}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(DiffEqBase.build_jac_config), OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, Function, Function, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.Val{true}})
precompile(Tuple{Type{NamedTuple{(:colorvec, :sparsity), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Nothing}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:colorvec, :sparsity), Tuple{Base.UnitRange{Int64}, Nothing}}, Type{FiniteDiff.JacobianCache{CacheType1, CacheType2, CacheType3, ColorType, SparsityType, fdtype, returntype} where returntype where fdtype where SparsityType where ColorType where CacheType3 where CacheType2 where CacheType1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Type{Base.Val{:forward}}})
precompile(Tuple{Type{OrdinaryDiffEq.Rodas4Cache{uType, rateType, uNoUnitsType, JType, WType, TabType, TFType, UFType, F, JCType, GCType} where GCType where JCType where F where UFType where TFType where TabType where WType where JType where uNoUnitsType where rateType where uType}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 1}, Array{Float64, 1}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, Array{Float64, 1}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}})
precompile(Tuple{Type{OrdinaryDiffEq.InterpolationData{F, uType, tType, kType, cacheType} where cacheType where kType where tType where uType where F}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, Bool, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}})
precompile(Tuple{Type{NamedTuple{(:dense, :k, :interp, :calculate_error, :destats), T} where T<:Tuple}, Tuple{Bool, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, Bool, DiffEqBase.DEStats}})
precompile(Tuple{getfield(DiffEqBase, Symbol("#kw##build_solution")), NamedTuple{(:dense, :k, :interp, :calculate_error, :destats), Tuple{Bool, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, Bool, DiffEqBase.DEStats}}, typeof(DiffEqBase.build_solution), DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, Array{Float64, 1}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{Type{OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, Array{Float64, 1}, Nothing, Array{Array{Float64, 1}, 1}, Float64, Float64, Function, CoilGun.Scenario, Array{Float64, 1}, Array{Float64, 1}, Float64, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, Float64, Bool, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Int64, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, Nothing, Int64, Bool, Bool, Bool, Int64, Int64, Float64, Bool, Bool, Bool, Bool, Bool, Bool, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, DiffEqBase.DEStats, OrdinaryDiffEq.DefaultInit})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.copyto!), Array{Array{Float64, 1}, 1}, Int64, Array{Array{Float64, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Array{Float64, 1}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(DiffEqBase.initialize!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Core.Compiler.Signature}, Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Dimension{D} where D, 1}, Base.HasLength, Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Unitful.Dimension{:Time}, Unitful.Dimension{:Length}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Length}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#49#50")){Int64}, Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), (), A} where A}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)),)}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), (), nothing}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1)),), (), A} where A}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)),)}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1)),), (), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)),)}})
precompile(Tuple{Type{Core.Compiler.Signature}, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{Type{Core.Compiler.Signature}, Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Unitful.name), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Unitful.name), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Unitful.dimtype), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{Type{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), (), A} where A}})
precompile(Tuple{typeof(Base._compute_eltype), Type{#s66} where #s66<:Tuple})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{T} where T, Any, Any})
precompile(Tuple{typeof(Base.getproperty), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Symbol})
precompile(Tuple{getfield(Unitful, Symbol("#10#12")), Unitful.Dimension{:Time}})
precompile(Tuple{getfield(Unitful, Symbol("#10#12")), Unitful.Dimension{:Mass}})
precompile(Tuple{typeof(Base.isless), Symbol, Symbol})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}})
precompile(Tuple{getfield(Unitful, Symbol("#10#12")), Unitful.Dimension{:Current}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), (), nothing}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, 1}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Joule, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Dimension{D} where D, 1}, Base.HasLength, Tuple{Unitful.Dimension{:Current}, Unitful.Dimension{:Length}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Current}, Unitful.Dimension{:Length}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), (), A} where A}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), (), nothing}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.muladd), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(DiffEqBase.ODE_DEFAULT_NORM), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, Float64}}, Float64, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.zero), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(CoilGun, Symbol("#12#16")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}}, Array{Float64, 1}, Tuple{Int64}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.GMP.MPZ.add!), NamedTuple{(:init,), Tuple{Base.GMP.BigInt}}, Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.sum), Array{Base.MPFR.BigFloat, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(CoilGun.coilProblem!), Array{Float64, 1}, Array{Float64, 1}, CoilGun.Scenario, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.abs2), typeof(Base.add_sum), Array{Float64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.abs2), typeof(Base.add_sum), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{getfield(DiffEqBase, Symbol("##_#422")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.DefaultLinSolve, Array{Float64, 1}, LinearAlgebra.UniformScaling{Bool}, Array{Float64, 1}, Bool})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(<)), Float64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(==)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(<=)), Float64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.Math.throw_exp_domainerror), Float64})
precompile(Tuple{typeof(DiffEqBase.throwfastbc), Tuple{Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(OrdinaryDiffEq.ode_determine_initdt), Array{Float64, 1}, Float64, Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}})
precompile(Tuple{typeof(OrdinaryDiffEq.handle_dt!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}})
precompile(Tuple{typeof(Base.:(<=)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.println), Base.TTY, String})
precompile(Tuple{typeof(Base.map), Function, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(CoilGun, Symbol("#13#17")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Unitful.Dimension{:Time}, Unitful.Dimension{:Current}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=5, den=1)),), (), A} where A}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=5, den=1)),)}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=5, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=5, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=5, den=1)),), (), nothing}})
precompile(Tuple{Type{Core.Compiler.Signature}, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=5, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=5, den=1)),)}(), nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Unitful.name), Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Unitful.dimtype), Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{Type{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Unitful.Dimension{:Current}, Unitful.Dimension{:Current}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)),)}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Dimension{D} where D, 1}, Base.HasLength, Tuple{Unitful.Dimension{:Current}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Current}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{Type{Core.Compiler.Signature}, Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(CoilGun.coilTime), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, CoilGun.ProjectileCoilEvent, Int64})
precompile(Tuple{getfield(CoilGun, Symbol("#13#17")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}, Int64})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#13#17")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#13#17")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}}})
precompile(Tuple{typeof(Base.isnothing), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(>=)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.convert), Type{Union{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), U}, Unitful.Level{L, S, Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), U}} where S where L} where U where T}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{getfield(CoilGun, Symbol("#block#3")){CoilGun.Coil}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(CoilGun.couplingFactor), CoilGun.Coil})
precompile(Tuple{typeof(CoilGun.coilCrossSectionalArea), CoilGun.Coil})
precompile(Tuple{typeof(CoilGun.selfInductance), CoilGun.Coil})
precompile(Tuple{typeof(CoilGun.projectileInducedVoltage), CoilGun.Coil, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(CoilGun.current), CoilGun.Coil, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Int64})
precompile(Tuple{getfield(CoilGun, Symbol("#block#3")){CoilGun.Coil}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.rationalize), Type{Int64}, Float64, Int64})
precompile(Tuple{typeof(Base.:(^)), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}, Float64})
precompile(Tuple{typeof(Base.:(^)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, Float64})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), (), A} where A}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), (), nothing}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}, Unitful.Dimensions{()}})
precompile(Tuple{Type{Unitful.Quantity{T, D, U} where U where D where T}, Float64, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), nothing}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-3, den=1)),), (), A} where A}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)),)}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-3, den=1)),), (), nothing}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=4, den=1)),), (), A} where A}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=4, den=1)),)}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=4, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=4, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=4, den=1)),), (), nothing}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=4, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=4, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=4, den=1)),)}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, Base.Val{2}})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=4, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=4, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=4, den=1)),)}(), nothing}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-4, den=1)),), (), A} where A}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-4, den=1)),)}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-4, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-4, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-4, den=1)),), (), nothing}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-5, den=1)),)}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-5, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-5, den=1)),)}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-5, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=4, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=4, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=4, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Base.Val{3}})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=5, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=5, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=5, den=1)),)}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=5, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=5, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=5, den=1)),)}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=5, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=5, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-5, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=5, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=5, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=5, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.convert), Type{Union{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), U}, Unitful.Level{L, S, Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), U}} where S where L} where U where T}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), (), A} where A}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=3, den=1)))}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=3, den=1)))}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=3, den=1)))}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), (), nothing}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, 1}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Mass}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Unitful.Dimension{:Current}, Unitful.Dimension{:Mass}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Unitful.Dimension{:Time}, Unitful.Dimension{:Time}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=3, den=1)))}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Base.Irrational{:π}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.convert), Type{Union{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), U}, Unitful.Level{L, S, Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), U}} where S where L} where U where T}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=3, den=1)))}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Dimension{D} where D, 1}, Base.HasLength, Tuple{Unitful.Dimension{:Current}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Current}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), (), A} where A}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), (), nothing}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{()}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{()}})
precompile(Tuple{getfield(Unitful, Symbol("##s56#152")), Any, Any, Any})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(), Unitful.Dimensions{()}(), nothing}})
precompile(Tuple{typeof(Base.:(!=)), Unitful.Dimensions{()}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Tuple{Float64, Base.Rational{Int64}}}, Symbol})
precompile(Tuple{typeof(Base.throw_domerr_powbysq), Base.Rational{Int64}, Int64})
precompile(Tuple{typeof(Base.power_by_squaring), Base.Rational{Int64}, Int64})
precompile(Tuple{getfield(Unitful, Symbol("#dpow#85")), Base.Rational{Int64}, Base.Rational{Int64}})
precompile(Tuple{getfield(Unitful, Symbol("#dpow#85")), Base.Rational{Int64}, Int64})
precompile(Tuple{getfield(Unitful, Symbol("#dpow#85")), Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Unitful.basefactor), Float64, Base.Rational{Int64}, Int64, Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{()}(), nothing}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Unitful, Symbol("#87#91")), typeof(Base.:(*)), Float64, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Unitful, Symbol("#88#92")), typeof(Base.:(*)), Float64, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Int64}}, Tuple{Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Unitful, Symbol("#89#93")), typeof(Base.:(*)), Int64, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(), Unitful.Dimensions{()}(), nothing}})
precompile(Tuple{typeof(Base.:(//)), Base.Rational{Int64}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Base.Rational{Int64}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Base.Rational{Int64}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{}})
precompile(Tuple{typeof(Base.:(^)), Float64, Int64})
precompile(Tuple{typeof(Base.:(>)), Float64, Int64})
precompile(Tuple{typeof(Base.:(/)), Int64, Float64})
precompile(Tuple{typeof(Base.denominator), Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(^)), Base.Rational{Int64}, Int64})
precompile(Tuple{typeof(Base.isapprox), Float64, Float64})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, 1}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Unitful.name), Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Unitful.dimtype), Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{Type{Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=3, den=1)))}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=3, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(CoilGun.coilCurrent), CoilGun.Coil, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(<=)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(!=)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Unitful, Symbol("#87#91")), typeof(Base.:(*)), Float64, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Unitful, Symbol("#88#92")), typeof(Base.:(*)), Float64, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Int64}}, Tuple{Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Unitful, Symbol("#89#93")), typeof(Base.:(*)), Int64, Tuple{Float64, Base.Rational{Int64}}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Unitful, Symbol("#87#91")), typeof(Base.:(*)), Float64, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Unitful, Symbol("#88#92")), typeof(Base.:(*)), Float64, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Base.Rational{Int64}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.convert), Type{Union{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), U}, Unitful.Level{L, S, Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), U}} where S where L} where U where T}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#13#17")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#13#17")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#13#17")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}}, Int64})
precompile(Tuple{typeof(Base.:(<)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.convert), Type{Union{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), U}, Unitful.Level{L, S, Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), U}} where S where L} where U where T}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.copyto!), Array{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}} where T, 1}, Int64, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}} where T, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#13#17")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}} where T, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}} where T, 1}}, Int64})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}} where T, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}} where T, 1}}}})
precompile(Tuple{typeof(CoilGun.hFieldCoil), CoilGun.Coil, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)),)}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(/)), Int64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{getfield(CoilGun, Symbol("#logarithm#4")){CoilGun.Coil}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{getfield(Unitful, Symbol("##s31#66")), Any, Any})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#67#68")), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), (), A} where A}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), (), nothing}})
precompile(Tuple{typeof(Base.sqrt), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)),)}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.convert), Type{Union{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), U}, Unitful.Level{L, S, Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), U}} where S where L} where U where T}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}} where T, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}} where T, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}} where T, 1}}}, Int64})
precompile(Tuple{typeof(CoilGun.hFieldCoil), CoilGun.Coil, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.sum), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}} where T, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Core.Compiler.Signature}, Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}} where T, 1}}, Int64})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}} where T, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}} where T, 1}}}})
precompile(Tuple{typeof(CoilGun.∇HFieldCoil), CoilGun.Coil, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, typeof(Unitful.ustrip)})
precompile(Tuple{getfield(ForwardDiff, Symbol("##s19#31")), Any, Any, Any, Any})
precompile(Tuple{typeof(ForwardDiff.tupexpr), Function, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(ForwardDiff, Symbol("#32#33")), Base.UnitRange{Int64}})
precompile(Tuple{getfield(ForwardDiff, Symbol("#32#33")), Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(ForwardDiff, Symbol("#32#33"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(ForwardDiff, Symbol("#32#33"))}})
precompile(Tuple{getfield(ForwardDiff, Symbol("##s19#46")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(ForwardDiff, Symbol("#47#48")), Base.UnitRange{Int64}})
precompile(Tuple{getfield(ForwardDiff, Symbol("#47#48")), Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(ForwardDiff, Symbol("#47#48"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(ForwardDiff, Symbol("#47#48"))}})
precompile(Tuple{getfield(CoilGun, Symbol("#logarithm#5")){Float64, Float64}, ForwardDiff.Dual{ForwardDiff.Tag{getfield(CoilGun, Symbol("#logarithm#5")){Float64, Float64}, Float64}, Float64, 1}})
precompile(Tuple{getfield(CoilGun, Symbol("#∇logarithm#6")){getfield(CoilGun, Symbol("#logarithm#5")){Float64, Float64}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.convert), Type{Union{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), U}, Unitful.Level{L, S, Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), U}} where S where L} where U where T}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}} where T, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}} where T, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}} where T, 1}}}, Int64})
precompile(Tuple{typeof(CoilGun.∇HFieldCoil), CoilGun.Coil, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.sum), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}})
precompile(Tuple{typeof(CoilGun.volume), CoilGun.IronProjectile})
precompile(Tuple{typeof(CoilGun.dipoleCoilForce), CoilGun.IronProjectile, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(CoilGun.airResistance), CoilGun.IronProjectile, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(CoilGun.totalForce), CoilGun.IronProjectile, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}(), nothing}}, Unitful.Quantity{Base.Rational{Int64}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.convert), Type{Union{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), U}, Unitful.Level{L, S, Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), U}} where S where L} where U where T}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)),)}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)),)}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)),)}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)),)}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(!=)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Unitful, Symbol("#87#91")), typeof(Base.:(*)), Float64, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Unitful, Symbol("#88#92")), typeof(Base.:(*)), Float64, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Int64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Unitful, Symbol("#89#93")), typeof(Base.:(*)), Int64, Tuple{Float64, Int64}, Tuple{Float64, Int64}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Base.Rational{Int64}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Base.Rational{Int64}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=2, den=1)), Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.convert), Type{Union{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), U}, Unitful.Level{L, S, Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), U}} where S where L} where U where T}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(CoilGun.density), CoilGun.IronProjectile})
precompile(Tuple{typeof(CoilGun.mass), CoilGun.IronProjectile})
precompile(Tuple{typeof(CoilGun.frictionForce), CoilGun.IronProjectile, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.convert), Type{Union{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), U}, Unitful.Level{L, S, Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), U}} where S where L} where U where T}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-3, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Unitful.name), Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Unitful.dimtype), Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{Type{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Dimension{D} where D, 1}, Base.HasLength, Tuple{Unitful.Dimension{:Mass}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Mass}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=3, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=3, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-3, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-3, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.convert), Type{Union{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), U}, Unitful.Level{L, S, Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), U}} where S where L} where U where T}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Dimension{D} where D, 1}, Base.HasLength, Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)),)}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.abs), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{getfield(Unitful, Symbol("##s31#94")), Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Unitful, Symbol("#95#96")), Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}, getfield(Unitful, Symbol("#95#96"))}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Unitful.Unit{U, D} where D where U}, Symbol})
precompile(Tuple{getfield(Unitful, Symbol("#95#96")), Unitful.Dimension{:Length}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}, getfield(Unitful, Symbol("#95#96"))}, Int64})
precompile(Tuple{getfield(Unitful, Symbol("#95#96")), Unitful.Dimension{:Mass}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Base.Rational{Int64}})
precompile(Tuple{getfield(Unitful, Symbol("#95#96")), Unitful.Dimension{:Time}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Base.Rational{Int64}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), (), A} where A}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), (), nothing}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Base.Rational{Int64}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(>=)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Float64})
precompile(Tuple{typeof(Base.numerator), Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Dimension{D} where D, 1}, Base.HasLength, Tuple{Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)),), (), A} where A}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)),)}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)),), (), nothing}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, 1}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Unitful.name), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Unitful.dimtype), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{Type{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(!=)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Float64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Unitful, Symbol("#87#91")), typeof(Base.:(*)), Float64, Tuple{Float64, Int64}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Unitful, Symbol("#88#92")), typeof(Base.:(*)), Float64, Tuple{Float64, Int64}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Int64}}, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}, Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapafoldl), getfield(Unitful, Symbol("#89#93")), typeof(Base.:(*)), Int64, Tuple{Float64, Int64}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Base.Rational{Int64}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=3, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, typeof(Unitful.ustrip)})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{Type{Core.Compiler.Signature}, Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(CoilGun.∂HField_∂Current), CoilGun.Coil, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{getfield(CoilGun, Symbol("#7#8")){Array{CoilGun.Coil, 1}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, CoilGun.ProjectileCoilEvent, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Int64})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#7#8")){Array{CoilGun.Coil, 1}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, CoilGun.ProjectileCoilEvent, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(CoilGun.dHField), Array{CoilGun.Coil, 1}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, CoilGun.ProjectileCoilEvent, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), (), A} where A}})
precompile(Tuple{Type{Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)),)}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), (), nothing}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(CoilGun.∂Current), CoilGun.Coil, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.exp), Unitful.Quantity{Float64, Unitful.Dimensions{()}(), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{()}(), nothing}}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(/)), Float64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=2, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(!=)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Henry, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#7#8")){Array{CoilGun.Coil, 1}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, CoilGun.ProjectileCoilEvent, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#7#8")){Array{CoilGun.Coil, 1}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, CoilGun.ProjectileCoilEvent, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#7#8")){Array{CoilGun.Coil, 1}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, CoilGun.ProjectileCoilEvent, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}}, Int64})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=3, den=1)))}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#10#12"))}, Unitful.Dimension{:Time}, Unitful.Dimension{:Mass}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=3, den=1)))}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)),)}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-4, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(:init,), Tuple{Int64}}, Tuple{Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Base.Rational{Int64}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Volt, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._append!), Array{Unitful.Unit{U, D} where D where U, 1}, Base.HasLength, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.sum), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.convert), Type{Union{Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), U}, Unitful.Level{L, S, Unitful.Quantity{T, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), U}} where S where L} where U where T}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(CoilGun.ℒ), CoilGun.IronProjectile, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(CoilGun.δM), CoilGun.IronProjectile, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(CoilGun.∂Mag_irr_∂He), CoilGun.IronProjectile, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(+)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, typeof(Unitful.ustrip)})
precompile(Tuple{typeof(Base.abs), Float64})
precompile(Tuple{getfield(CoilGun, Symbol("#taylorApproxℒ#9")){Float64}, Float64})
precompile(Tuple{typeof(Base.:(-)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.abs), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(<)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Int64})
precompile(Tuple{typeof(Base.sign), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(+)), Int64, Float64})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Int64}, Float64})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.map), getfield(Unitful, Symbol("#58#59")), Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), (), A} where A}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Unitful, Symbol("#32#35"))}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.mapafoldl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)),)}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base.:(*)), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), (), nothing}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(|>)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, typeof(Unitful.ustrip)})
precompile(Tuple{typeof(CoilGun.∂ℒ), CoilGun.IronProjectile, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(CoilGun.∂Magnetization_∂HField), CoilGun.IronProjectile, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{getfield(CoilGun, Symbol("#∂taylorApproxℒ#10")){Float64}, Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)))}, Unitful.Dimensions{()}})
precompile(Tuple{typeof(Base.:(/)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{getfield(LoopVectorization, Symbol("##s96#20")), Any, Any, Any, Type{T} where T, Any})
precompile(Tuple{getfield(VectorizationBase, Symbol("##s46#44")), Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(VectorizationBase, Symbol("#46#48")){Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(VectorizationBase, Symbol("#45#47")), Base.Iterators.Filter{getfield(VectorizationBase, Symbol("#46#48")){Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Expr, 1}, Base.Generator{Base.Iterators.Filter{getfield(VectorizationBase, Symbol("#46#48")){Int64}, Base.UnitRange{Int64}}, getfield(VectorizationBase, Symbol("#45#47"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Expr, 1}, Base.Generator{Base.Iterators.Filter{getfield(VectorizationBase, Symbol("#46#48")){Int64}, Base.UnitRange{Int64}}, getfield(VectorizationBase, Symbol("#45#47"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{getfield(VectorizationBase, Symbol("#46#48")){Int64}, Base.UnitRange{Int64}}, getfield(VectorizationBase, Symbol("#45#47"))}})
precompile(Tuple{getfield(VectorizationBase, Symbol("##s19#74")), Any, Any, Any})
precompile(Tuple{getfield(VectorizationBase, Symbol("##s19#71")), Any, Any, Any})
precompile(Tuple{getfield(VectorizationBase, Symbol("##s46#70")), Any, Any, Any})
precompile(Tuple{typeof(VectorizationBase.intlog2), Int64})
precompile(Tuple{typeof(VectorizationBase.T_shift), Type{Float64}})
precompile(Tuple{typeof(Base.:(>>>)), Int64, Int64})
precompile(Tuple{typeof(VectorizationBase.pick_vector_width), Type{Float64}})
precompile(Tuple{getfield(LoopVectorization, Symbol("##s133#97")), Any, Any, Any, Any, Any, Any, Any, Type{T} where T, Type{T} where T, Type{T} where T, Type{T} where T, Any, Any, Any})
precompile(Tuple{typeof(LoopVectorization._avx_loopset), Core.SimpleVector, Core.SimpleVector, Core.SimpleVector, Core.SimpleVector, Core.SimpleVector, Any})
precompile(Tuple{typeof(Base.setindex!), Array{LoopVectorization.OperationStruct, 1}, LoopVectorization.OperationStruct, Int64})
precompile(Tuple{typeof(Base.getindex), Type{LoopVectorization.ArrayRefStruct{array, ptr} where ptr where array}, LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A_subset_2_with_k##")}})
precompile(Tuple{Type{Base.Dict{Symbol, LoopVectorization.Operation}}})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Int64, LoopVectorization.NumberType}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Int64, Symbol}, 1}, Int64, Int64})
precompile(Tuple{Type{LoopVectorization.LoopSet}, Array{Symbol, 1}, Array{Int64, 1}, Array{LoopVectorization.Loop, 1}, Base.Dict{Symbol, LoopVectorization.Operation}, Array{LoopVectorization.Operation, 1}, Array{Int64, 1}, Array{Int64, 1}, LoopVectorization.LoopOrder, Expr, Expr, Array{Tuple{Int64, Symbol}, 1}, Array{Tuple{Int64, Int64}, 1}, Array{Tuple{Int64, Float64}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Array{LoopVectorization.ArrayReferenceMeta, 1}, Array{Float64, 2}, Array{Float64, 2}, Array{Bool, 1}, Array{Bool, 1}, Base.RefValue{LoopVectorization.UnrollSpecification}, Base.RefValue{Bool}, Base.RefValue{LoopVectorization.LoopStartStopManager}, Base.RefValue{Int64}, Base.RefValue{Bool}, Symbol})
precompile(Tuple{Type{LoopVectorization.LoopSet}, Symbol})
precompile(Tuple{typeof(LoopVectorization.extract_loop), Int64})
precompile(Tuple{typeof(LoopVectorization.add_loops!), LoopVectorization.LoopSet, Core.SimpleVector, Core.SimpleVector})
precompile(Tuple{typeof(Base.resize!), LoopVectorization.LoopOrder, Int64})
precompile(Tuple{typeof(Base.:(*)), String, Int64, Char})
precompile(Tuple{typeof(Base._append!), Array{Symbol, 1}, Base.HasShape{1}, Base.Generator{Array{LoopVectorization.ArrayReferenceMeta, 1}, typeof(LoopVectorization.vptr)}})
precompile(Tuple{typeof(LoopVectorization.num_parameters), Core.SimpleVector})
precompile(Tuple{typeof(Base.reverse!), Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.loopindex), LoopVectorization.LoopSet, UInt64, UInt8})
precompile(Tuple{typeof(LoopVectorization.expandbyoffset!), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(LoopVectorization.parents_symvec), LoopVectorization.LoopSet, UInt64, Bool, Int64})
precompile(Tuple{typeof(LoopVectorization.expandedopname), Symbol, Int64})
precompile(Tuple{typeof(LoopVectorization.add_op!), LoopVectorization.LoopSet, LoopVectorization.Instruction, Array{LoopVectorization.OperationStruct, 1}, Array{Int64, 1}, Array{Bool, 1}, Int64, Array{LoopVectorization.ArrayReferenceMeta, 1}, Symbol, Int64})
precompile(Tuple{typeof(LoopVectorization.add_parents_to_op!), LoopVectorization.LoopSet, Array{LoopVectorization.Operation, 1}, UInt64, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.add_parents_to_ops!), LoopVectorization.LoopSet, Array{LoopVectorization.OperationStruct, 1}, Int64})
precompile(Tuple{typeof(LoopVectorization.add_ops!), LoopVectorization.LoopSet, Array{LoopVectorization.Instruction, 1}, Array{LoopVectorization.OperationStruct, 1}, Array{LoopVectorization.ArrayReferenceMeta, 1}, Array{Symbol, 1}, Int64, Array{Int64, 1}, Array{Bool, 1}, Int64})
precompile(Tuple{typeof(LoopVectorization.process_metadata!), LoopVectorization.LoopSet, Core.SimpleVector, Int64})
precompile(Tuple{typeof(LoopVectorization.add_array_symbols!), LoopVectorization.LoopSet, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(LoopVectorization.extract_external_functions!), LoopVectorization.LoopSet, Int64})
precompile(Tuple{typeof(LoopVectorization.avx_loopset), Array{LoopVectorization.Instruction, 1}, Array{LoopVectorization.OperationStruct, 1}, Array{LoopVectorization.ArrayRefStruct{array, ptr} where ptr where array, 1}, Core.SimpleVector, Core.SimpleVector, Core.SimpleVector, Any})
precompile(Tuple{typeof(LoopVectorization.sizeofeltypes), Tuple{DataType, DataType}, Int64})
precompile(Tuple{typeof(LoopVectorization.typeeltype), Type{VectorizationBase.PackedStridedPointer{Float64, 0}}})
precompile(Tuple{typeof(LoopVectorization.assume), Expr})
precompile(Tuple{typeof(LoopVectorization.loopiteratesatleastonce), LoopVectorization.Loop, Bool})
precompile(Tuple{Type{LoopVectorization.Loop}, LoopVectorization.LoopSet, Expr, Symbol, Type{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Base.OneTo{Int64}, getfield(LoopVectorization, Symbol("#93#95"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.OneTo{Int64}, getfield(LoopVectorization, Symbol("#93#95"))}})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(LoopVectorization, Symbol("#89#90")){Array{Int64, 1}}, typeof(Base.max), Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(LoopVectorization, Symbol("#89#90")){Array{Int64, 1}}, typeof(Base.max), Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Base.OneTo{Int64}, getfield(LoopVectorization, Symbol("#94#96")){Array{LoopVectorization.OperationStruct, 1}, LoopVectorization.LoopSet, Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.OneTo{Int64}, getfield(LoopVectorization, Symbol("#94#96")){Array{LoopVectorization.OperationStruct, 1}, LoopVectorization.LoopSet, Array{Int64, 1}}}})
precompile(Tuple{Type{LoopVectorization.ArrayReferenceMeta}, LoopVectorization.LoopSet, LoopVectorization.ArrayRefStruct{array, ptr} where ptr where array, Array{Symbol, 1}, Array{Symbol, 1}, Array{Int64, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.create_mrefs!), LoopVectorization.LoopSet, Array{LoopVectorization.ArrayRefStruct{array, ptr} where ptr where array, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Array{Int64, 1}, Array{Bool, 1}, Tuple{DataType, DataType}})
precompile(Tuple{typeof(LoopVectorization.array), LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A_subset_2_with_k##")}})
precompile(Tuple{typeof(LoopVectorization.ptr), LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A_subset_2_with_k##")}})
precompile(Tuple{typeof(LoopVectorization.extract_varg), Int64})
precompile(Tuple{typeof(LoopVectorization.pushvarg!), LoopVectorization.LoopSet, LoopVectorization.ArrayReferenceMeta, Int64, Symbol})
precompile(Tuple{typeof(LoopVectorization.add_mref!), LoopVectorization.LoopSet, LoopVectorization.ArrayReferenceMeta, Int64, Type{VectorizationBase.PackedStridedPointer{Float64, 0}}, Symbol})
precompile(Tuple{typeof(LoopVectorization.expandbyoffset!), Array{Int64, 1}, Core.SimpleVector, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(LoopVectorization.expandbyoffset!), Array{Int64, 1}, Core.SimpleVector, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Core.SimpleVector})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Core.SimpleVector}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Core.SimpleVector}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(LoopVectorization.expandbyoffset!), Array{Tuple{Int64, Int64}, 1}, Core.SimpleVector, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(LoopVectorization.expandbyoffset!), Array{Tuple{Int64, Int64}, 1}, Core.SimpleVector, Array{Int64, 1}})
precompile(Tuple{typeof(LoopVectorization.expandbyoffset!), Array{Tuple{Int64, Float64}, 1}, Core.SimpleVector, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(LoopVectorization.expandbyoffset!), Array{Tuple{Int64, Float64}, 1}, Core.SimpleVector, Array{Int64, 1}})
precompile(Tuple{typeof(LoopVectorization.expandbyoffset!), Array{Tuple{Int64, LoopVectorization.NumberType}, 1}, Core.SimpleVector, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(LoopVectorization.expandbyoffset!), Array{Tuple{Int64, LoopVectorization.NumberType}, 1}, Core.SimpleVector, Array{Int64, 1}})
precompile(Tuple{typeof(LoopVectorization.expandbyoffset!), Array{Tuple{Int64, Symbol}, 1}, Core.SimpleVector, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(LoopVectorization.expandbyoffset!), Array{Tuple{Int64, Symbol}, 1}, Core.SimpleVector, Array{Int64, 1}})
precompile(Tuple{typeof(LoopVectorization.returned_ops), LoopVectorization.LoopSet})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Int64, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.setunrolled!), LoopVectorization.Operation, Symbol, Symbol, Symbol})
precompile(Tuple{typeof(Base.fill!), Array{Bool, 3}, Bool})
precompile(Tuple{typeof(LoopVectorization.getloopid), LoopVectorization.LoopSet, Symbol})
precompile(Tuple{typeof(LoopVectorization.lsvecwidthshift), LoopVectorization.LoopSet, Symbol, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{typeof(LoopVectorization.cost_vec_buf), LoopVectorization.LoopSet})
precompile(Tuple{typeof(LoopVectorization.reg_pres_buf), LoopVectorization.LoopSet})
precompile(Tuple{typeof(Base.reverse!), Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.add_sum), Base.IndexLinear, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(Base.:(==)), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(LoopVectorization.loadintostore), LoopVectorization.LoopSet, LoopVectorization.Operation})
precompile(Tuple{typeof(LoopVectorization.unroll_cost), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64, Int64, Int64, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Base.get!), getfield(LoopVectorization, Symbol("#37#38")), Base.Dict{Symbol, Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(LoopVectorization.loopdepindices), LoopVectorization.LoopSet, LoopVectorization.Operation})
precompile(Tuple{typeof(Base.to_index), Array{Int64, 1}, Nothing})
precompile(Tuple{typeof(LoopVectorization.stride_penalty), LoopVectorization.LoopSet, LoopVectorization.Operation, Array{Symbol, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_domerr_powbysq), Float64, Int64})
precompile(Tuple{typeof(Base.power_by_squaring), Float64, Int64})
precompile(Tuple{typeof(LoopVectorization.stride_penalty), LoopVectorization.LoopSet, Array{Symbol, 1}})
precompile(Tuple{typeof(LoopVectorization.solve_unroll_constT), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64})
precompile(Tuple{typeof(LoopVectorization.maybedemotesize), Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.solve_unroll_constU), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64})
precompile(Tuple{typeof(LoopVectorization.solve_unroll_iter), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64, Int64, Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(LoopVectorization.solve_unroll), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.solve_unroll), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.solve_unroll), Symbol, Symbol, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64, Symbol, LoopVectorization.Loop, LoopVectorization.Loop, Int64, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(LoopVectorization.maxnegativeoffset), LoopVectorization.LoopSet, LoopVectorization.Operation, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, LoopVectorization.InstructionCost}, Symbol})
precompile(Tuple{typeof(LoopVectorization.vector_cost), LoopVectorization.InstructionCost, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.unitstride), LoopVectorization.LoopSet, LoopVectorization.Operation, Symbol})
precompile(Tuple{typeof(LoopVectorization.cost), LoopVectorization.LoopSet, LoopVectorization.Operation, Symbol, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.add_constant_offset_load_elmination_cost!), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.RefValue{Bool}, LoopVectorization.LoopSet, LoopVectorization.Operation, Float64, LoopVectorization.UnrollSymbols, Bool, Bool, Int64, Int64, Bool})
precompile(Tuple{typeof(LoopVectorization.isoptranslation), LoopVectorization.LoopSet, LoopVectorization.Operation, LoopVectorization.UnrollSymbols})
precompile(Tuple{typeof(LoopVectorization.load_elimination_cost_factor!), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.RefValue{Bool}, LoopVectorization.LoopSet, LoopVectorization.Operation, Float64, LoopVectorization.UnrollSymbols, Int64, Int64})
precompile(Tuple{typeof(Base.findall), Array{Bool, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(LoopVectorization, Symbol("#67#68")){LoopVectorization.LoopSet}, typeof(Base.mul_prod), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(LoopVectorization, Symbol("#67#68")){LoopVectorization.LoopSet}, typeof(Base.mul_prod), Base.IndexLinear, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base._all), Base.Fix2{typeof(Base.in), Array{Symbol, 1}}, Array{Symbol, 1}, Base.Colon})
precompile(Tuple{typeof(LoopVectorization.load_constrained), LoopVectorization.Operation, Symbol, Symbol, Symbol, Bool})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{Symbol, 1}, Base.Fix2{typeof(Base.isequal), Symbol}}, Int64})
precompile(Tuple{typeof(LoopVectorization.prefetchisagoodidea), LoopVectorization.LoopSet, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}})
precompile(Tuple{typeof(LoopVectorization.update_costs!), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Float64, Bool, Bool})
precompile(Tuple{typeof(Base._all), getfield(LoopVectorization, Symbol("#43#46")){Array{Symbol, 1}}, Array{Symbol, 1}, Base.Colon})
precompile(Tuple{typeof(LoopVectorization.hasintersection), Array{Symbol, 1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{getfield(LoopVectorization, Symbol("#39#41")){Array{Symbol, 1}}, Symbol})
precompile(Tuple{getfield(LoopVectorization, Symbol("#40#42")){Array{Symbol, 1}}, Symbol})
precompile(Tuple{typeof(LoopVectorization.store_load_deps!), Array{Symbol, 1}, LoopVectorization.Operation, LoopVectorization.ArrayReferenceMeta})
precompile(Tuple{typeof(LoopVectorization.isunrolled_sym), LoopVectorization.Operation, Symbol, Symbol})
precompile(Tuple{typeof(LoopVectorization.set_upstream_family!), Array{Bool, 1}, LoopVectorization.Operation, Bool})
precompile(Tuple{typeof(LoopVectorization.evaluate_cost_tile), LoopVectorization.LoopSet, Array{Symbol, 1}, LoopVectorization.UnrollSymbols})
precompile(Tuple{typeof(LoopVectorization.save_tilecost!), LoopVectorization.LoopSet})
precompile(Tuple{typeof(Base.iterate), LoopVectorization.LoopOrders, Array{Int64, 1}})
precompile(Tuple{typeof(LoopVectorization.reject_candidate), LoopVectorization.Operation, Symbol, Symbol})
precompile(Tuple{typeof(LoopVectorization.choose_tile), LoopVectorization.LoopSet})
precompile(Tuple{typeof(Base.issubset), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(LoopVectorization.evaluate_cost_unroll), LoopVectorization.LoopSet, Array{Symbol, 1}, Symbol, Float64})
precompile(Tuple{typeof(LoopVectorization.count_reductions), LoopVectorization.LoopSet})
precompile(Tuple{typeof(LoopVectorization.demote_unroll_factor), LoopVectorization.LoopSet, Int64, Symbol})
precompile(Tuple{typeof(LoopVectorization.unroll_no_reductions), LoopVectorization.LoopSet, Array{Symbol, 1}, Symbol})
precompile(Tuple{typeof(LoopVectorization.depchain_cost!), LoopVectorization.LoopSet, Array{Bool, 1}, LoopVectorization.Operation, Symbol, Int64, Int64, Float64, Int64})
precompile(Tuple{typeof(LoopVectorization.determine_unroll_factor), LoopVectorization.LoopSet, Array{Symbol, 1}, Symbol, Symbol})
precompile(Tuple{typeof(LoopVectorization.choose_order_cost), LoopVectorization.LoopSet})
precompile(Tuple{typeof(LoopVectorization.addsetv!), Array{Symbol, 1}, Symbol})
precompile(Tuple{typeof(LoopVectorization.add_operation!), LoopVectorization.LoopSet, Array{Int64, 1}, LoopVectorization.LoopSet, LoopVectorization.Operation})
precompile(Tuple{typeof(LoopVectorization.append_if_included!), Array{Tuple{Int64, Symbol}, 1}, Array{Tuple{Int64, Symbol}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(LoopVectorization.append_if_included!), Array{Tuple{Int64, Int64}, 1}, Array{Tuple{Int64, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(LoopVectorization.append_if_included!), Array{Tuple{Int64, Float64}, 1}, Array{Tuple{Int64, Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(LoopVectorization.append_if_included!), Array{Tuple{Int64, LoopVectorization.NumberType}, 1}, Array{Tuple{Int64, LoopVectorization.NumberType}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(LoopVectorization.split_loopset), LoopVectorization.LoopSet, Array{Int64, 1}})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unalias), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unalias), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.foreach), typeof(Base.empty!), Array{Array{LoopVectorization.Operation, 1}, 1}})
precompile(Tuple{typeof(LoopVectorization.search_tree), Array{LoopVectorization.Operation, 1}, Symbol})
precompile(Tuple{typeof(LoopVectorization.dependent_outer_reducts), LoopVectorization.LoopSet, LoopVectorization.Operation})
precompile(Tuple{typeof(LoopVectorization.isnopidentity), LoopVectorization.LoopSet, LoopVectorization.Operation, Symbol, Symbol, Symbol, Int64})
precompile(Tuple{typeof(LoopVectorization.set_upstream_family!), Array{Bool, 1}, LoopVectorization.Operation, Bool, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.LinearIndices{4, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.LinearIndices{4, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(LoopVectorization.isunrolled_sym), LoopVectorization.Operation, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{LoopVectorization.Operation, 1}, getfield(LoopVectorization, Symbol("#63#64")){Symbol}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{LoopVectorization.Operation, 1}, Base.Generator{Array{LoopVectorization.Operation, 1}, getfield(LoopVectorization, Symbol("#63#64")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(LoopVectorization.isnopidentity), LoopVectorization.LoopSet, LoopVectorization.Operation, Symbol, Symbol, Symbol, Nothing})
precompile(Tuple{typeof(LoopVectorization.addoptoorder!), LoopVectorization.LoopSet, Array{Bool, 1}, Array{Bool, 1}, LoopVectorization.Operation, Symbol, Int64, Symbol, Symbol, Symbol, Bool})
precompile(Tuple{typeof(LoopVectorization.fillorder!), LoopVectorization.LoopSet, Array{Symbol, 1}, Symbol, Symbol, Bool, Symbol})
precompile(Tuple{Type{LoopVectorization.UnrollSpecification}, LoopVectorization.LoopSet, Symbol, Symbol, Symbol, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.setconstantop!), LoopVectorization.LoopSet, LoopVectorization.Operation, Symbol})
precompile(Tuple{typeof(LoopVectorization.setop!), LoopVectorization.LoopSet, LoopVectorization.Operation, Expr})
precompile(Tuple{typeof(LoopVectorization.setconstantop!), LoopVectorization.LoopSet, LoopVectorization.Operation, Expr})
precompile(Tuple{typeof(LoopVectorization.lower_licm_constants!), LoopVectorization.LoopSet})
precompile(Tuple{typeof(LoopVectorization.callexpr), LoopVectorization.Instruction})
precompile(Tuple{typeof(LoopVectorization.add_loopvalue!), Expr, Symbol, Symbol, Int64})
precompile(Tuple{typeof(LoopVectorization.add_loopvalue!), Expr, Symbol, LoopVectorization.UnrollArgs{Nothing}, Int64})
precompile(Tuple{typeof(LoopVectorization.reduce_range!), Expr, Symbol, LoopVectorization.Instruction, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.reduce_expr!), Expr, Symbol, LoopVectorization.Instruction, Int64})
precompile(Tuple{typeof(LoopVectorization.lower_compute!), Expr, LoopVectorization.Operation, LoopVectorization.LoopSet, LoopVectorization.UnrollArgs{Nothing}, Nothing})
precompile(Tuple{typeof(LoopVectorization.maskexpr), Int64})
precompile(Tuple{typeof(LoopVectorization.maskexpr), Symbol})
precompile(Tuple{typeof(LoopVectorization.maskexpr), Expr})
precompile(Tuple{typeof(LoopVectorization.definemask), LoopVectorization.Loop})
precompile(Tuple{typeof(LoopVectorization.determine_eltype), LoopVectorization.LoopSet})
precompile(Tuple{typeof(LoopVectorization.determine_width), LoopVectorization.LoopSet, Symbol})
precompile(Tuple{typeof(LoopVectorization.define_eltype_vec_width!), Expr, LoopVectorization.LoopSet, Symbol})
precompile(Tuple{typeof(LoopVectorization.setup_preamble!), LoopVectorization.LoopSet, LoopVectorization.UnrollSpecification})
precompile(Tuple{typeof(LoopVectorization.initialize_outer_reductions!), Expr, LoopVectorization.Operation, Int64, Int64, Symbol, Nothing})
precompile(Tuple{typeof(Base.filter), typeof(LoopVectorization.isloopvalue), Array{LoopVectorization.Operation, 1}})
precompile(Tuple{typeof(LoopVectorization.uniquearrayrefs), LoopVectorization.LoopSet})
precompile(Tuple{typeof(Base.println), LoopVectorization.ArrayReferenceMeta})
precompile(Tuple{typeof(LoopVectorization.otherindexunrolled), LoopVectorization.LoopSet, Symbol, LoopVectorization.ArrayReferenceMeta})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(LoopVectorization, Symbol("#53#54")){Symbol}, typeof(Base.add_sum), Array{LoopVectorization.ArrayReferenceMeta, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(LoopVectorization, Symbol("#53#54")){Symbol}, typeof(Base.add_sum), Base.IndexLinear, Array{LoopVectorization.ArrayReferenceMeta, 1}})
precompile(Tuple{typeof(LoopVectorization.use_loop_induct_var!), LoopVectorization.LoopSet, Expr, LoopVectorization.ArrayReferenceMeta, Array{LoopVectorization.ArrayReferenceMeta, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Array{LoopVectorization.ArrayReferenceMeta, 1}, getfield(LoopVectorization, Symbol("#56#59")){LoopVectorization.LoopSet, Expr, Array{LoopVectorization.ArrayReferenceMeta, 1}}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{LoopVectorization.ArrayReferenceMeta, 1}, Base.Generator{Array{LoopVectorization.ArrayReferenceMeta, 1}, getfield(LoopVectorization, Symbol("#56#59")){LoopVectorization.LoopSet, Expr, Array{LoopVectorization.ArrayReferenceMeta, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.fill!), Array{Array{LoopVectorization.ArrayReferenceMeta, 1}, 1}, Array{LoopVectorization.ArrayReferenceMeta, 1}})
precompile(Tuple{typeof(Base.reverse!), Array{Array{LoopVectorization.ArrayReferenceMeta, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._any), getfield(LoopVectorization, Symbol("#57#60")){Int64}, Array{Array{Int64, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{LoopVectorization.Operation, 1}, getfield(LoopVectorization, Symbol("#55#58"))}, Int64})
precompile(Tuple{typeof(LoopVectorization.add_loop_start_stop_manager!), LoopVectorization.LoopSet})
precompile(Tuple{typeof(LoopVectorization.startloop), LoopVectorization.Loop, Symbol})
precompile(Tuple{typeof(LoopVectorization.looplengthexpr), LoopVectorization.Loop})
precompile(Tuple{typeof(LoopVectorization.pointermax), LoopVectorization.LoopSet, LoopVectorization.ArrayReferenceMeta, Int64, Int64, Bool, Int64})
precompile(Tuple{typeof(LoopVectorization.pointermax), LoopVectorization.LoopSet, LoopVectorization.ArrayReferenceMeta, Int64, Int64, Bool, Expr})
precompile(Tuple{typeof(LoopVectorization.pointermax), LoopVectorization.LoopSet, LoopVectorization.ArrayReferenceMeta, Int64, Int64, Bool, Symbol})
precompile(Tuple{typeof(LoopVectorization.pointermax), LoopVectorization.LoopSet, LoopVectorization.ArrayReferenceMeta, Int64, Int64, Bool})
precompile(Tuple{typeof(LoopVectorization.defpointermax), LoopVectorization.LoopSet, LoopVectorization.ArrayReferenceMeta, Int64, Int64, Bool})
precompile(Tuple{typeof(LoopVectorization.startloop), LoopVectorization.LoopSet, LoopVectorization.UnrollSpecification, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.looprange), Int64, Int64, Symbol})
precompile(Tuple{typeof(LoopVectorization.addexpr), Symbol, Int64})
precompile(Tuple{typeof(LoopVectorization.looprange), Symbol, Int64, Symbol})
precompile(Tuple{typeof(LoopVectorization.staticmulincr), Symbol, Symbol})
precompile(Tuple{typeof(LoopVectorization.vec_looprange), Int64, Int64, Expr, Expr})
precompile(Tuple{typeof(LoopVectorization.vec_looprange), Int64, Int64, Symbol, Symbol})
precompile(Tuple{typeof(LoopVectorization.vec_looprange), Int64, Int64, Symbol, Bool})
precompile(Tuple{typeof(LoopVectorization.vec_looprange), Symbol, Int64, Expr, Expr})
precompile(Tuple{typeof(LoopVectorization.vec_looprange), Symbol, Int64, Symbol, Symbol})
precompile(Tuple{typeof(LoopVectorization.vec_looprange), Symbol, Int64, Symbol, Bool})
precompile(Tuple{typeof(LoopVectorization.terminatecondition), LoopVectorization.Loop, LoopVectorization.UnrollSpecification, Int64, Symbol, Bool, Int64})
precompile(Tuple{typeof(LoopVectorization.terminatecondition), LoopVectorization.LoopSet, LoopVectorization.UnrollSpecification, Int64, Bool, Int64})
precompile(Tuple{getfield(Base, Symbol("#throw_dmrsa#197")), Tuple{Int64, Int64, Int64, Int64}, Int64})
precompile(Tuple{typeof(LoopVectorization.getparentsreductzero), LoopVectorization.LoopSet, LoopVectorization.Operation})
precompile(Tuple{typeof(LoopVectorization.lower_constant!), Expr, LoopVectorization.Operation, LoopVectorization.LoopSet, LoopVectorization.UnrollArgs{Nothing}})
precompile(Tuple{typeof(LoopVectorization.lower_zero!), Expr, LoopVectorization.Operation, LoopVectorization.LoopSet, LoopVectorization.UnrollArgs{Nothing}, LoopVectorization.NumberType})
precompile(Tuple{typeof(LoopVectorization.indices_calculated_by_pointer_offsets), LoopVectorization.LoopSet, LoopVectorization.ArrayReferenceMeta})
precompile(Tuple{typeof(LoopVectorization.staticexpr), Int64})
precompile(Tuple{typeof(LoopVectorization._MMind), Int64})
precompile(Tuple{typeof(LoopVectorization.addoffset!), Expr, Symbol, Int64, Bool})
precompile(Tuple{typeof(LoopVectorization.symbolind), Symbol, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}})
precompile(Tuple{typeof(LoopVectorization.addoffset!), Expr, Expr, Int64, Bool})
precompile(Tuple{typeof(LoopVectorization.mem_offset), LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}, Array{Bool, 1}, Bool})
precompile(Tuple{typeof(LoopVectorization.add_vectorized_offset_unrolled!), Expr, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.add_vectorized_offset!), Expr, Symbol, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.mem_offset_u), LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.pushvectorload!), Expr, LoopVectorization.Operation, Symbol, LoopVectorization.UnrollArgs{Nothing}, Int64, Symbol, Symbol, Bool, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.prefetchisagoodidea), LoopVectorization.LoopSet, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}})
precompile(Tuple{typeof(LoopVectorization.add_prefetches!), Expr, LoopVectorization.LoopSet, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.lower_load_vectorized!), Expr, LoopVectorization.LoopSet, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}, Symbol, Int64})
precompile(Tuple{typeof(LoopVectorization.lower_load_scalar!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}, Int64, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_compute!), Expr, LoopVectorization.Operation, LoopVectorization.LoopSet, LoopVectorization.UnrollArgs{Nothing}, Symbol})
precompile(Tuple{typeof(LoopVectorization.storeinstr), LoopVectorization.Operation, Symbol})
precompile(Tuple{typeof(LoopVectorization.lower_store_vectorized!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}, Symbol, Bool, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_store_scalar!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}, Symbol, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_conditionalstore_vectorized!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}, Symbol, Bool, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_conditionalstore_scalar!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}, Symbol, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_store!), Expr, LoopVectorization.LoopSet, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}, Symbol})
precompile(Tuple{typeof(LoopVectorization.lower!), Expr, LoopVectorization.Operation, LoopVectorization.LoopSet, LoopVectorization.UnrollArgs{Nothing}, Symbol, Nothing})
precompile(Tuple{typeof(LoopVectorization.incrementloopcounter), LoopVectorization.UnrollSpecification, Int64, Symbol, Int64})
precompile(Tuple{typeof(LoopVectorization.incrementloopcounter!), Expr, LoopVectorization.UnrollSpecification, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.offset_ptr), LoopVectorization.ArrayReferenceMeta, LoopVectorization.UnrollSpecification, Symbol, Int64, Int64, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.incrementloopcounter), LoopVectorization.LoopSet, LoopVectorization.UnrollSpecification, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.symbolind), Symbol, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}})
precompile(Tuple{typeof(LoopVectorization.mem_offset), LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}, Array{Bool, 1}, Bool})
precompile(Tuple{typeof(LoopVectorization.mem_offset_u), LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_store_vectorized!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}, Nothing, Bool, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_store_scalar!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}, Nothing, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_conditionalstore_vectorized!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}, Nothing, Bool, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_conditionalstore_scalar!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}, Nothing, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_store!), Expr, LoopVectorization.LoopSet, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}, Nothing})
precompile(Tuple{typeof(LoopVectorization.lower_constant!), Expr, LoopVectorization.Operation, LoopVectorization.LoopSet, LoopVectorization.UnrollArgs{Int64}})
precompile(Tuple{typeof(LoopVectorization.lower_zero!), Expr, LoopVectorization.Operation, LoopVectorization.LoopSet, LoopVectorization.UnrollArgs{Int64}, LoopVectorization.NumberType})
precompile(Tuple{typeof(LoopVectorization.lower_load_for_optranslation!), Expr, LoopVectorization.Operation, LoopVectorization.LoopSet, LoopVectorization.UnrollArgs{Int64}, Nothing, Int64})
precompile(Tuple{typeof(LoopVectorization.pushvectorload!), Expr, LoopVectorization.Operation, Symbol, LoopVectorization.UnrollArgs{Int64}, Int64, Symbol, Nothing, Bool, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.add_prefetches!), Expr, LoopVectorization.LoopSet, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.lower_load_vectorized!), Expr, LoopVectorization.LoopSet, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}, Nothing, Int64})
precompile(Tuple{typeof(LoopVectorization.lower_load_scalar!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}, Int64, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_load!), Expr, LoopVectorization.Operation, LoopVectorization.LoopSet, LoopVectorization.UnrollArgs{Int64}, Nothing})
precompile(Tuple{typeof(LoopVectorization.add_loopvalue!), Expr, Symbol, LoopVectorization.UnrollArgs{Int64}, Int64})
precompile(Tuple{typeof(LoopVectorization.lower_compute!), Expr, LoopVectorization.Operation, LoopVectorization.LoopSet, LoopVectorization.UnrollArgs{Int64}, Nothing})
precompile(Tuple{typeof(LoopVectorization.lower!), Expr, LoopVectorization.Operation, LoopVectorization.LoopSet, LoopVectorization.UnrollArgs{Int64}, Nothing, Bool})
precompile(Tuple{typeof(LoopVectorization.lower_store_vectorized!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}, Symbol, Bool, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_store_scalar!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}, Symbol, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_conditionalstore_vectorized!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}, Symbol, Bool, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_conditionalstore_scalar!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}, Symbol, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_store!), Expr, LoopVectorization.LoopSet, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}, Symbol})
precompile(Tuple{typeof(LoopVectorization.lower_load_for_optranslation!), Expr, LoopVectorization.Operation, LoopVectorization.LoopSet, LoopVectorization.UnrollArgs{Int64}, Symbol, Int64})
precompile(Tuple{typeof(LoopVectorization.pushvectorload!), Expr, LoopVectorization.Operation, Symbol, LoopVectorization.UnrollArgs{Int64}, Int64, Symbol, Symbol, Bool, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_load_vectorized!), Expr, LoopVectorization.LoopSet, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Int64}, Symbol, Int64})
precompile(Tuple{typeof(LoopVectorization.lower_load!), Expr, LoopVectorization.Operation, LoopVectorization.LoopSet, LoopVectorization.UnrollArgs{Int64}, Symbol})
precompile(Tuple{typeof(LoopVectorization.lower_compute!), Expr, LoopVectorization.Operation, LoopVectorization.LoopSet, LoopVectorization.UnrollArgs{Int64}, Symbol})
precompile(Tuple{typeof(LoopVectorization.lower!), Expr, LoopVectorization.Operation, LoopVectorization.LoopSet, LoopVectorization.UnrollArgs{Int64}, Symbol, Bool})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(LoopVectorization.isstore), typeof(Base.add_sum), Array{LoopVectorization.Operation, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(LoopVectorization.isstore), typeof(Base.add_sum), Base.IndexLinear, Array{LoopVectorization.Operation, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_block), LoopVectorization.LoopSet, LoopVectorization.UnrollSpecification, Int64, Symbol, Int64})
precompile(Tuple{typeof(LoopVectorization.pushvectorload!), Expr, LoopVectorization.Operation, Symbol, LoopVectorization.UnrollArgs{Nothing}, Int64, Symbol, Nothing, Bool, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_load_vectorized!), Expr, LoopVectorization.LoopSet, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}, Nothing, Int64})
precompile(Tuple{typeof(LoopVectorization.lower_store_vectorized!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}, Nothing, Bool, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_store_scalar!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}, Nothing, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_conditionalstore_vectorized!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}, Nothing, Bool, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_conditionalstore_scalar!), Expr, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}, Nothing, Array{Bool, 1}})
precompile(Tuple{typeof(LoopVectorization.lower_store!), Expr, LoopVectorization.LoopSet, LoopVectorization.Operation, LoopVectorization.UnrollArgs{Nothing}, Nothing})
precompile(Tuple{typeof(LoopVectorization.lower!), Expr, LoopVectorization.Operation, LoopVectorization.LoopSet, LoopVectorization.UnrollArgs{Nothing}, Nothing, Nothing})
precompile(Tuple{typeof(LoopVectorization.lower_block), LoopVectorization.LoopSet, LoopVectorization.UnrollSpecification, Int64, Nothing, Int64})
precompile(Tuple{typeof(LoopVectorization.lower_block), LoopVectorization.LoopSet, LoopVectorization.UnrollSpecification, Int64, Bool, Int64})
precompile(Tuple{typeof(LoopVectorization.expect), Expr})
precompile(Tuple{getfield(LoopVectorization, Symbol("#71#72")), Int64})
precompile(Tuple{typeof(LoopVectorization.lower_no_unroll), LoopVectorization.LoopSet, LoopVectorization.UnrollSpecification, Int64, Bool})
precompile(Tuple{getfield(LoopVectorization, Symbol("#73#74")){Expr}, Int64})
precompile(Tuple{typeof(LoopVectorization.reduce_range!), Expr, LoopVectorization.LoopSet, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), LoopVectorization.Loop, Symbol})
precompile(Tuple{typeof(LoopVectorization.add_upper_outer_reductions), LoopVectorization.LoopSet, Expr, Int64, Int64, LoopVectorization.Loop, Symbol})
precompile(Tuple{typeof(LoopVectorization.loopvarremcomparison), LoopVectorization.Loop, Int64, Bool, Bool})
precompile(Tuple{typeof(LoopVectorization.pointermax), LoopVectorization.LoopSet, LoopVectorization.ArrayReferenceMeta, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(LoopVectorization.pointerremcomparison), LoopVectorization.LoopSet, Int64, Int64, Int64, Bool, Bool, LoopVectorization.Loop})
precompile(Tuple{typeof(LoopVectorization.init_remblock), LoopVectorization.Loop, LoopVectorization.LoopStartStopManager, Int64})
precompile(Tuple{typeof(LoopVectorization.lower_unrolled_dynamic), LoopVectorization.LoopSet, LoopVectorization.UnrollSpecification, Int64, Bool})
precompile(Tuple{typeof(LoopVectorization.gc_preserve), LoopVectorization.LoopSet, Expr})
precompile(Tuple{typeof(LoopVectorization.reduce_expr!), Expr, LoopVectorization.LoopSet, Int64})
precompile(Tuple{typeof(LoopVectorization.lower_unrollspec), LoopVectorization.LoopSet})
precompile(Tuple{typeof(LoopVectorization.lower), LoopVectorization.LoopSet, Array{Symbol, 1}, Symbol, Symbol, Symbol, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(LoopVectorization.lower), LoopVectorization.LoopSet, Int64})
precompile(Tuple{typeof(LoopVectorization.lower_and_split_loops), LoopVectorization.LoopSet, Int64})
precompile(Tuple{typeof(LoopVectorization.loopset_return_value), LoopVectorization.LoopSet, Base.Val{true}})
precompile(Tuple{typeof(LoopVectorization.lower), LoopVectorization.LoopSet, Int64, Int64, Int64})
precompile(Tuple{typeof(LoopVectorization.avx_body), LoopVectorization.LoopSet, Tuple{Int8, Int8, Int8, Int64}})
precompile(Tuple{getfield(Base, Symbol("##any#596")), Function, typeof(Base.any), Function, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._any), getfield(LoopVectorization, Symbol("#35#36")){Array{Symbol, 1}}, Array{Symbol, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce_empty_iter), Function, Function, Base.ValueIterator{Base.Dict{Symbol, Array{Float64, 1}}}, Base.HasEltype})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.ValueIterator{Base.Dict{Symbol, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Base.maximum), Function, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.maximum), typeof(Base.add_sum), NamedTuple{(:init,), Tuple{Float64}}, Base.ValueIterator{Base.Dict{Symbol, Array{Float64, 1}}}, Int64})
precompile(Tuple{typeof(VectorizationBase.vmul), Int64, Int64})
precompile(Tuple{typeof(VectorizationBase.vsub), Int64, Int64})
precompile(Tuple{getfield(VectorizationBase, Symbol("##s13#17")), Any, Any, Any})
precompile(Tuple{getfield(SIMDPirates, Symbol("##s22#90")), Any, Any, Any, Any, Any, Any, Any, Type{T} where T, Any})
precompile(Tuple{typeof(VectorizationBase.llvmtype), Type{T} where T})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{DataType, String}, Type{T} where T})
precompile(Tuple{typeof(Base.string), String, Int64, Vararg{Any, N} where N})
precompile(Tuple{getfield(VectorizationBase, Symbol("##s13#7")), Any, Any, Any, Any, Any})
precompile(Tuple{getfield(SIMDPirates, Symbol("##s13#41")), Any, Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(SIMDPirates.suffix), Int64, Any})
precompile(Tuple{typeof(SIMDPirates.llvmins), Symbol, Int64, Type{T} where T})
precompile(Tuple{getfield(SIMDPirates, Symbol("##s22#99")), Any, Any, Any, Any, Any, Any, Any, Any, Any, Type{T} where T, Any})
precompile(Tuple{getfield(VectorizationBase, Symbol("##s46#97")), Any, Any, Any, Any})
precompile(Tuple{typeof(VectorizationBase.mask_type), Int64})
precompile(Tuple{typeof(VectorizationBase.vadd), Int64, Int64})
precompile(Tuple{getfield(SIMDPirates, Symbol("##s22#93")), Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{getfield(SIMDPirates, Symbol("##s22#100")), Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.getindex), Type{LoopVectorization.ArrayRefStruct{array, ptr} where ptr where array}, LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A_subset_2_with_k##")}, LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A_subset_1_with_k##")}, LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}})
precompile(Tuple{typeof(LoopVectorization.sizeofeltypes), Tuple{DataType, DataType, DataType}, Int64})
precompile(Tuple{typeof(LoopVectorization.typeeltype), Type{VectorizationBase.SparseStridedPointer{Float64, 1}}})
precompile(Tuple{typeof(LoopVectorization.typeeltype), Type{VectorizationBase.PackedStridedPointer{Float64, 1}}})
precompile(Tuple{typeof(LoopVectorization.create_mrefs!), LoopVectorization.LoopSet, Array{LoopVectorization.ArrayRefStruct{array, ptr} where ptr where array, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Array{Int64, 1}, Array{Bool, 1}, Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(LoopVectorization.array), LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A_subset_1_with_k##")}})
precompile(Tuple{typeof(LoopVectorization.ptr), LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A_subset_1_with_k##")}})
precompile(Tuple{typeof(LoopVectorization.add_mref!), LoopVectorization.LoopSet, LoopVectorization.ArrayReferenceMeta, Int64, Type{VectorizationBase.SparseStridedPointer{Float64, 1}}, Symbol})
precompile(Tuple{typeof(LoopVectorization.array), LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}})
precompile(Tuple{typeof(LoopVectorization.ptr), LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}})
precompile(Tuple{typeof(LoopVectorization.add_mref!), LoopVectorization.LoopSet, LoopVectorization.ArrayReferenceMeta, Int64, Type{VectorizationBase.PackedStridedPointer{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Base._any), getfield(LoopVectorization, Symbol("#44#47")){Array{Symbol, 1}}, Array{Symbol, 1}, Base.Colon})
precompile(Tuple{getfield(Base, Symbol("#56#57")){DataType, typeof(Base.length)}, LoopVectorization.Loop})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(Base, Symbol("#56#57")){DataType, typeof(Base.length)}, typeof(Base.mul_prod), Array{LoopVectorization.Loop, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(Base, Symbol("#56#57")){DataType, typeof(Base.length)}, typeof(Base.mul_prod), Base.IndexLinear, Array{LoopVectorization.Loop, 1}})
precompile(Tuple{typeof(Base.mul_prod), Float64, Float64})
precompile(Tuple{getfield(VectorizationBase, Symbol("##s46#76")), Any, Any})
precompile(Tuple{getfield(VectorizationBase, Symbol("##s46#69")), Any, Any, Any, Any})
precompile(Tuple{typeof(VectorizationBase.precalc_quote_from_descript), Tuple{Int64}})
precompile(Tuple{getfield(VectorizationBase, Symbol("##s46#67")), Any, Any, Any, Any})
precompile(Tuple{typeof(Base.tail), Tuple{Int64, Int64}})
precompile(Tuple{getfield(VectorizationBase, Symbol("##s46#66")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.:(>>)), Int64, Int64})
precompile(Tuple{typeof(Base.isodd), Int64})
precompile(Tuple{typeof(Base.in), Int64, Tuple{Int64, Int64}})
precompile(Tuple{getfield(VectorizationBase, Symbol("##s19#31")), Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.:(∉)), Int64, Array{Int64, 1}})
precompile(Tuple{getfield(SIMDPirates, Symbol("##s22#89")), Any, Any, Any, Any, Any, Type{T} where T, Any, Type{T} where T, Any})
precompile(Tuple{getfield(SIMDPirates, Symbol("##s22#91")), Any, Any, Any, Any, Any, Any, Any, Any, Type{T} where T, Any})
precompile(Tuple{getfield(SIMDPirates, Symbol("##s16#39")), Any, Any, Any, Any, Any, Type{T} where T, Any, Any})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.UnitRange{Int64}, getfield(SIMDPirates, Symbol("#26#27")){Int64, String}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(SIMDPirates, Symbol("#26#27")){Int64, String}}})
precompile(Tuple{typeof(SIMDPirates.llvmconst), Int64, Type{T} where T, Int64})
precompile(Tuple{getfield(SIMDPirates, Symbol("##s22#63")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{getfield(SIMDPirates, Symbol("##s22#95")), Any, Any, Any, Any, Any, Any, Any, Type{T} where T, Any})
precompile(Tuple{getfield(SIMDPirates, Symbol("##s22#92")), Any, Any, Any, Any, Any, Type{T} where T, Any, Any, Any})
precompile(Tuple{getfield(SIMDPirates, Symbol("##s22#97")), Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{getfield(SIMDPirates, Symbol("##s22#94")), Any, Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.getindex), Type{LoopVectorization.ArrayRefStruct{array, ptr} where ptr where array}, LoopVectorization.ArrayRefStruct{:𝐀, Symbol("##vptr##_𝐀")}, LoopVectorization.ArrayRefStruct{:𝐁, Symbol("##vptr##_𝐁")}, LoopVectorization.ArrayRefStruct{:𝐂, Symbol("##vptr##_𝐂")}})
precompile(Tuple{Type{LoopVectorization.Loop}, LoopVectorization.LoopSet, Expr, Symbol, Type{VectorizationBase.StaticLowerUnitRange{1}}})
precompile(Tuple{typeof(LoopVectorization.array), LoopVectorization.ArrayRefStruct{:𝐀, Symbol("##vptr##_𝐀")}})
precompile(Tuple{typeof(LoopVectorization.ptr), LoopVectorization.ArrayRefStruct{:𝐀, Symbol("##vptr##_𝐀")}})
precompile(Tuple{typeof(LoopVectorization.array), LoopVectorization.ArrayRefStruct{:𝐁, Symbol("##vptr##_𝐁")}})
precompile(Tuple{typeof(LoopVectorization.ptr), LoopVectorization.ArrayRefStruct{:𝐁, Symbol("##vptr##_𝐁")}})
precompile(Tuple{typeof(LoopVectorization.array), LoopVectorization.ArrayRefStruct{:𝐂, Symbol("##vptr##_𝐂")}})
precompile(Tuple{typeof(LoopVectorization.ptr), LoopVectorization.ArrayRefStruct{:𝐂, Symbol("##vptr##_𝐂")}})
precompile(Tuple{typeof(Base.first), Tuple{Int64, LoopVectorization.NumberType}})
precompile(Tuple{typeof(Base.last), Tuple{Int64, LoopVectorization.NumberType}})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Int64, LoopVectorization.NumberType}, 1}, Tuple{Int64, LoopVectorization.NumberType}})
precompile(Tuple{getfield(Core.Compiler, Symbol("#174#175")), Any, Any, Any})
precompile(Tuple{typeof(Base.trailing_zeros), Int64})
precompile(Tuple{getfield(SIMDPirates, Symbol("##s22#88")), Any, Any, Any, Any, Any, Type{T} where T, Any})
precompile(Tuple{typeof(VectorizationBase.T_shift), Type{Int64}})
precompile(Tuple{typeof(VectorizationBase.pick_vector_width), Type{Int64}})
precompile(Tuple{typeof(Base.getindex), Type{LoopVectorization.ArrayRefStruct{array, ptr} where ptr where array}, LoopVectorization.ArrayRefStruct{:P2, Symbol("##vptr##_P2")}})
precompile(Tuple{typeof(LoopVectorization.typeeltype), Type{VectorizationBase.PackedStridedPointer{Int64, 0}}})
precompile(Tuple{typeof(LoopVectorization.array), LoopVectorization.ArrayRefStruct{:P2, Symbol("##vptr##_P2")}})
precompile(Tuple{typeof(LoopVectorization.ptr), LoopVectorization.ArrayRefStruct{:P2, Symbol("##vptr##_P2")}})
precompile(Tuple{typeof(LoopVectorization.add_mref!), LoopVectorization.LoopSet, LoopVectorization.ArrayReferenceMeta, Int64, Type{VectorizationBase.PackedStridedPointer{Int64, 0}}, Symbol})
precompile(Tuple{getfield(VectorizationBase, Symbol("##s13#6")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(DataStructures._heap_bubble_down!), DataStructures.LessThan, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(DataStructures._binary_heap_pop!), DataStructures.LessThan, Array{Float64, 1}})
precompile(Tuple{typeof(OrdinaryDiffEq.fix_dt_at_bounds!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}})
precompile(Tuple{typeof(OrdinaryDiffEq.modify_dt_for_tstops!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}})
precompile(Tuple{typeof(OrdinaryDiffEq.loopheader!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}})
precompile(Tuple{typeof(Base.hasproperty), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, Symbol})
precompile(Tuple{typeof(Base.hasproperty), OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Symbol})
precompile(Tuple{typeof(DiffEqBase.check_error), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}})
precompile(Tuple{typeof(OrdinaryDiffEq.solution_endpoint_match_cur_integrator!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}})
precompile(Tuple{typeof(Base.print_to_string), Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.abs), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(OrdinaryDiffEq._postamble!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.abs), typeof(Base.max), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.abs), typeof(Base.max), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(OrdinaryDiffEq.derivative!), Array{Float64, 1}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, Float64, Array{Float64, 1}, OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(OrdinaryDiffEq.calc_tderivative!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, Float64, Bool})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.getrs!), Char, Array{Float64, 2}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(Base, Symbol("#throw_dmrsa#197")), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, false}}, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Float64, 1}, Base.IndexCartesian, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, false}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(LinearAlgebra.ldiv!), Array{Float64, 1}, LinearAlgebra.LU{Float64, Array{Float64, 2}}, Array{Float64, 1}})
precompile(Tuple{getfield(LinearAlgebra, Symbol("##generic_lufact!#134")), Bool, typeof(LinearAlgebra.generic_lufact!), Array{Float64, 2}, Base.Val{true}})
precompile(Tuple{typeof(LoopVectorization._avx_!), Base.Val{(0, 0, 0, 4)}, Type{Tuple{:LoopVectorization, :getindex, LoopVectorization.OperationStruct(loopdeps=0x0000000000000002, reduceddeps=0x0000000000000000, childdeps=0x0000000000000000, parents=0x0000000000000000, node_type=LoopVectorization.OperationType(0x00000001), array=0x01, symid=0x01), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(loopdeps=0x0000000000000001, reduceddeps=0x0000000000000000, childdeps=0x0000000000000000, parents=0x0000000000000000, node_type=LoopVectorization.OperationType(0x00000001), array=0x02, symid=0x02), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(loopdeps=0x0000000000000021, reduceddeps=0x0000000000000000, childdeps=0x0000000000000000, parents=0x0000000000000000, node_type=LoopVectorization.OperationType(0x00000001), array=0x03, symid=0x03), :LoopVectorization, :vfnmadd_fast, LoopVectorization.OperationStruct(loopdeps=0x0000000000000021, reduceddeps=0x0000000000000000, childdeps=0x0000000000000000, parents=0x0000000000010203, node_type=LoopVectorization.OperationType(0x00000002), array=0x00, symid=0x03), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(loopdeps=0x0000000000000021, reduceddeps=0x0000000000000000, childdeps=0x0000000000000000, parents=0x0000000000000004, node_type=LoopVectorization.OperationType(0x00000003), array=0x03, symid=0x04)}}, Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A_subset_2_with_k##")}(index_types=0x0000000000000001, indices=0x0000000000000002, offsets=0x0000000000000000), LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A_subset_1_with_k##")}(index_types=0x0000000000000001, indices=0x0000000000000001, offsets=0x0000000000000000), LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(index_types=0x0000000000000101, indices=0x0000000000000201, offsets=0x0000000000000000)}}, Type{Tuple{0, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}}}, Type{Tuple{:j, :i}}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, VectorizationBase.PackedStridedPointer{Float64, 0}, VectorizationBase.SparseStridedPointer{Float64, 1}, VectorizationBase.PackedStridedPointer{Float64, 1}})
precompile(Tuple{typeof(RecursiveFactorization._generic_lufact!), Array{Float64, 2}, Base.Val{true}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.trtrs!), Char, Char, Char, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(LoopVectorization._avx_!), Base.Val{(0, 0, 0, 4)}, Type{Tuple{:numericconstant, Symbol("##zero#433"), LoopVectorization.OperationStruct(loopdeps=0x0000000000000012, reduceddeps=0x0000000000000000, childdeps=0x0000000000000003, parents=0x0000000000000000, node_type=LoopVectorization.OperationType(0x00000000), array=0x00, symid=0x01), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(loopdeps=0x0000000000000013, reduceddeps=0x0000000000000000, childdeps=0x0000000000000000, parents=0x0000000000000000, node_type=LoopVectorization.OperationType(0x00000001), array=0x01, symid=0x02), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(loopdeps=0x0000000000000032, reduceddeps=0x0000000000000000, childdeps=0x0000000000000000, parents=0x0000000000000000, node_type=LoopVectorization.OperationType(0x00000001), array=0x02, symid=0x03), :LoopVectorization, :vfnmadd_fast, LoopVectorization.OperationStruct(loopdeps=0x0000000000000132, reduceddeps=0x0000000000000003, childdeps=0x0000000000000000, parents=0x0000000000020301, node_type=LoopVectorization.OperationType(0x00000002), array=0x00, symid=0x01), :LoopVectorization, :identity, LoopVectorization.OperationStruct(loopdeps=0x0000000000000012, reduceddeps=0x0000000000000003, childdeps=0x0000000000000000, parents=0x0000000000000004, node_type=LoopVectorization.OperationType(0x00000002), array=0x00, symid=0x01), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(loopdeps=0x0000000000000012, reduceddeps=0x0000000000000000, childdeps=0x0000000000000000, parents=0x0000000000000000, node_type=LoopVectorization.OperationType(0x00000001), array=0x03, symid=0x04), :LoopVectorization, :+, LoopVectorization.OperationStruct(loopdeps=0x0000000000000012, reduceddeps=0x0000000000000003, childdeps=0x0000000000000000, parents=0x0000000000000506, node_type=LoopVectorization.OperationType(0x00000002), array=0x00, symid=0x04), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(loopdeps=0x0000000000000012, reduceddeps=0x0000000000000003, childdeps=0x0000000000000000, parents=0x0000000000000007, node_type=LoopVectorization.OperationType(0x00000003), array=0x03, symid=0x05)}}, Type{Tuple{LoopVectorization.ArrayRefStruct{:𝐀, Symbol("##vptr##_𝐀")}(index_types=0x0000000000000101, indices=0x0000000000000103, offsets=0x0000000000000000), LoopVectorization.ArrayRefStruct{:𝐁, Symbol("##vptr##_𝐁")}(index_types=0x0000000000000101, indices=0x0000000000000302, offsets=0x0000000000000000), LoopVectorization.ArrayRefStruct{:𝐂, Symbol("##vptr##_𝐂")}(index_types=0x0000000000000101, indices=0x0000000000000102, offsets=0x0000000000000000)}}, Type{Tuple{0, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{(1, LoopVectorization.NumberType(0x02))}, Tuple{}}}, Type{Tuple{:m, :n, :k}}, Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, VectorizationBase.PackedStridedPointer{Float64, 1}, VectorizationBase.PackedStridedPointer{Float64, 1}, VectorizationBase.PackedStridedPointer{Float64, 1}})
precompile(Tuple{typeof(RecursiveFactorization.schur_complement!), Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}}, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(RecursiveFactorization._generic_lufact!), Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Base.Val{true}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}}, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64, Int64, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}}, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64, Int64, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(RecursiveFactorization.reckernel!), Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Base.Val{true}, Int64, Int64, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, true}}, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(RecursiveFactorization.reckernel!), Array{Float64, 2}, Base.Val{true}, Int64, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.trtrs!), Char, Char, Char, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, true}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, true}})
precompile(Tuple{getfield(RecursiveFactorization, Symbol("##lu!#3")), Bool, Int64, Int64, typeof(RecursiveFactorization.lu!), Array{Float64, 2}, Array{Int64, 1}, Base.Val{true}})
precompile(Tuple{getfield(LinearAlgebra, Symbol("##lu!#131")), Bool, typeof(LinearAlgebra.lu!), Array{Float64, 2}, Base.Val{true}})
precompile(Tuple{getfield(DiffEqBase, Symbol("##_#422")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.DefaultLinSolve, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 1}, Bool})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}}}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(DiffEqBase.calculate_residuals), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, DiffEqBase.DiffEqBC{Array{Float64, 1}}, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Float64, Float64, Base.RefValue{typeof(DiffEqBase.ODE_DEFAULT_NORM)}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(LinearAlgebra.generic_mul!), Array{Float64, 1}, Bool, Array{Float64, 1}, LinearAlgebra.MulAddMul{true, true, Bool, Bool}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.StepRange{Int64, Int64}}, true}}, Array{Float64, 1}, Tuple{Base.StepRange{Int64, Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.muladd), Tuple{Int64, Float64, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.StepRange{Int64, Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.gcdx), Int64, Int64})
precompile(Tuple{typeof(Base.intersect), Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.StepRange{Int64, Int64}}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.StepRange{Int64, Int64}}, true}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.StepRange{Int64, Int64}}, true}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.StepRange{Int64, Int64}}, true}})
precompile(Tuple{typeof(Base._throw_dmrs), Int64, String, Int64})
precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.StepRange{Int64, Int64}}, true}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.StepRange{Int64, Int64}}})
precompile(Tuple{typeof(Base.unsafe_copyto!), Array{Float64, 2}, Int64, Array{Float64, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 2}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.StepRange{Int64, Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(DiffEqBase.throwfastbc), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(OrdinaryDiffEq._throwWJerror), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(OrdinaryDiffEq.calc_W!), Array{Float64, 2}, OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, Nothing, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, Float64, Bool, Bool})
precompile(Tuple{typeof(OrdinaryDiffEq.perform_step!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, Bool})
precompile(Tuple{typeof(OrdinaryDiffEq.calc_dt_propose!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DiffEqBase.DiffEqBC{Array{Float64, 1}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(DiffEqBase.addsteps!), Array{Array{Float64, 1}, 1}, Float64, Array{Float64, 1}, Array{Float64, 1}, Float64, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, CoilGun.Scenario, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, Bool, Bool, Bool})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.muladd), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.muladd), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, DiffEqBase.DiffEqBC{Array{Float64, 1}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(OrdinaryDiffEq._ode_interpolant!), Array{Float64, 1}, Float64, Float64, Array{Float64, 1}, Array{Float64, 1}, Array{Array{Float64, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, Nothing, Type{Base.Val{0}}})
precompile(Tuple{typeof(OrdinaryDiffEq._savevalues!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, Bool, Bool})
precompile(Tuple{typeof(OrdinaryDiffEq._loopfooter!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}})
precompile(Tuple{typeof(OrdinaryDiffEq._initialize_dae!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.BrownFullBasicInit{Float64}, Base.Val{true}})
precompile(Tuple{typeof(OrdinaryDiffEq._initialize_dae!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.DefaultInit, Base.Val{true}})
precompile(Tuple{typeof(DiffEqBase.initialize_dae!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, OrdinaryDiffEq.DefaultInit})
precompile(Tuple{typeof(DiffEqBase.initialize_dae!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}})
precompile(Tuple{typeof(OrdinaryDiffEq._change_t_via_interpolation!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, Float64, Type{Base.Val{true}}})
precompile(Tuple{typeof(OrdinaryDiffEq.handle_tstop!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}})
precompile(Tuple{typeof(DiffEqBase.solve!), OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}})
precompile(Tuple{Type{NamedTuple{(:dir,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(FiniteDiff, Symbol("#kw##finite_difference_gradient!")), NamedTuple{(:dir,), Tuple{Bool}}, typeof(FiniteDiff.finite_difference_gradient!), Array{Float64, 1}, Function, Float64, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Float64}}, Tuple{Int64}})
precompile(Tuple{getfield(FiniteDiff, Symbol("##finite_difference_gradient!#17")), Float64, Float64, Bool, typeof(FiniteDiff.finite_difference_gradient!), Array{Float64, 1}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, Float64, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}})
precompile(Tuple{typeof(Base.tanh), Float64})
precompile(Tuple{typeof(Base.Math.coth), Float64})
precompile(Tuple{getfield(ForwardDiff, Symbol("##s19#34")), Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(ForwardDiff, Symbol("#35#36")), Base.UnitRange{Int64}})
precompile(Tuple{getfield(ForwardDiff, Symbol("#35#36")), Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(ForwardDiff, Symbol("#35#36"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(ForwardDiff, Symbol("#35#36"))}})
precompile(Tuple{getfield(ForwardDiff, Symbol("##s19#40")), Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(ForwardDiff, Symbol("#41#42")), Base.UnitRange{Int64}})
precompile(Tuple{getfield(ForwardDiff, Symbol("#41#42")), Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(ForwardDiff, Symbol("#41#42"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(ForwardDiff, Symbol("#41#42"))}})
precompile(Tuple{typeof(Base.sinh), Float64})
precompile(Tuple{getfield(CoilGun, Symbol("#langevin#11")){Float64}, ForwardDiff.Dual{ForwardDiff.Tag{getfield(CoilGun, Symbol("#langevin#11")){Float64}, Float64}, Float64, 1}})
precompile(Tuple{typeof(ForwardDiff.derivative), getfield(CoilGun, Symbol("#langevin#11")){Float64}, Float64})
precompile(Tuple{typeof(OrdinaryDiffEq.jacobian_finitediff_forward!), Array{Float64, 2}, Function, Array{Float64, 1}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, Array{Float64, 1}, OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, true, Array{Float64, 1}, Nothing, Float64, CoilGun.Scenario, Float64, Float64, Float64, Array{Array{Float64, 1}, 1}, DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, DataStructures.BinaryHeap{Float64, DataStructures.LessThan}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Array{Float64, 1}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}})
precompile(Tuple{getfield(FiniteDiff, Symbol("#kw##finite_difference_jacobian!")), NamedTuple{(:dir,), Tuple{Bool}}, typeof(FiniteDiff.finite_difference_jacobian!), Array{Float64, 2}, Function, Array{Float64, 1}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, Array{Float64, 1}})
precompile(Tuple{getfield(FiniteDiff, Symbol("##finite_difference_jacobian!#43")), Float64, Float64, Base.UnitRange{Int64}, Nothing, Bool, typeof(FiniteDiff.finite_difference_jacobian!), Array{Float64, 2}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, Array{Float64, 1}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.ldiv!), LinearAlgebra.LU{Float64, Array{Float64, 2}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.grow_to!), Array{Union{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#145#149")), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, getfield(Unitful, Symbol("#144#148"))}})
precompile(Tuple{typeof(Base.grow_to!), Array{Union{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#147#151")), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, getfield(Unitful, Symbol("#146#150"))}})
precompile(Tuple{typeof(Unitful.sortexp), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}})
precompile(Tuple{typeof(Base.empty), Array{Union{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, 1}, Type{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.push!), Array{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.copyto!), Array{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Int64, Array{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Unitful.Unit{U, D} where D where U, 1}, Int64, Array{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#145#149")), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, getfield(Unitful, Symbol("#144#148"))}, Int64})
precompile(Tuple{typeof(Base.empty), Array{Union{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, 1}, Type{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.push!), Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.copyto!), Array{Unitful.Unit{U, D} where D where U, 1}, Int64, Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Int64, Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#147#151")), Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}}, getfield(Unitful, Symbol("#146#150"))}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Unitful.Unit{U, D} where D where U}, Tuple{Array{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}}})
precompile(Tuple{typeof(Base.vcat), Array{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}, Array{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Unitful, Symbol("#142#143")){Base.GenericIOBuffer{Array{UInt8, 1}}, String}, Array{Unitful.Unit{U, D} where D where U, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, String}, Int64})
precompile(Tuple{typeof(Base.print_to_string), Base.Rational{Int64}})
precompile(Tuple{typeof(Unitful.superscript), Base.Rational{Int64}})
precompile(Tuple{typeof(Unitful.showrep), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{getfield(Unitful, Symbol("#142#143")){Base.GenericIOBuffer{Array{UInt8, 1}}, String}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Unitful.showrep), Base.GenericIOBuffer{Array{UInt8, 1}}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{getfield(Unitful, Symbol("#142#143")){Base.GenericIOBuffer{Array{UInt8, 1}}, String}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#13#17")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#13#17")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#13#17")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ohm, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=-2, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-3, den=1)))}(), nothing}}}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-1, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#14#18")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=-2, den=1))), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Base.Generator{Base.UnitRange{Int64}, getfield(CoilGun, Symbol("#15#19")){CoilGun.Scenario, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}}, Int64})
precompile(Tuple{Type{NamedTuple{(:dir,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(FiniteDiff, Symbol("#kw##finite_difference_gradient!")), NamedTuple{(:dir,), Tuple{Int64}}, typeof(FiniteDiff.finite_difference_gradient!), Array{Float64, 1}, Function, Float64, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}})
precompile(Tuple{getfield(FiniteDiff, Symbol("##finite_difference_gradient!#17")), Float64, Float64, Int64, typeof(FiniteDiff.finite_difference_gradient!), Array{Float64, 1}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, Float64, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}})
precompile(Tuple{getfield(FiniteDiff, Symbol("#kw##finite_difference_jacobian!")), NamedTuple{(:dir,), Tuple{Int64}}, typeof(FiniteDiff.finite_difference_jacobian!), Array{Float64, 2}, Function, Array{Float64, 1}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, Array{Float64, 1}})
precompile(Tuple{getfield(FiniteDiff, Symbol("##finite_difference_jacobian!#43")), Float64, Float64, Base.UnitRange{Int64}, Nothing, Int64, typeof(FiniteDiff.finite_difference_jacobian!), Array{Float64, 2}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, Array{Float64, 1}, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(RecursiveArrayTools, Symbol("#1#2")){DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, Int64}}})
precompile(Tuple{Type{Base.Dict{String, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Array{Float64, 1}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Array{Float64, 1}}, Array{Float64, 1}, String})
precompile(Tuple{typeof(CoilGun.extract_results), DiffEqBase.ODESolution{Float64, 2, Array{Array{Float64, 1}, 1}, Nothing, Nothing, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, DiffEqBase.ODEProblem{Array{Float64, 1}, Tuple{Float64, Float64}, true, CoilGun.Scenario, DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.Rodas4{0, false, DiffEqBase.DefaultLinSolve, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Array{Array{Array{Float64, 1}, 1}, 1}, OrdinaryDiffEq.Rodas4Cache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, Array{Float64, 2}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, DiffEqBase.TimeGradientWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Array{Float64, 1}, CoilGun.Scenario}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(CoilGun.coilProblem!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, CoilGun.Scenario}, DiffEqBase.DefaultLinSolve, FiniteDiff.JacobianCache{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Nothing, Base.Val{:forward}, Float64}, FiniteDiff.GradientCache{Nothing, Array{Float64, 1}, Array{Float64, 1}, Float64, Base.Val{:forward}, Float64, Base.Val{true}}}}, DiffEqBase.DEStats}, CoilGun.Scenario})
precompile(Tuple{typeof(Unitful.ustrip), Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Base.Dict{String, Array{Float64, 1}}, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Base.Dict{String, Array{Float64, 1}}, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Base.Dict{String, Array{Float64, 1}}, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Dict{String, Array{Float64, 1}}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Dict{String, Array{Float64, 1}}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Base.Multimedia.MIME{Symbol("text/plain")}, Any})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Grisu._show), Base.IOContext{REPL.Terminals.TTYTerminal}, Float64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Float64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Float64, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Float64, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Float64, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Float64, 1}, Char, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Base.Dict{String, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.print), Base.IOContext{REPL.Terminals.TTYTerminal}, String, Int64, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Base.IOContext{REPL.Terminals.TTYTerminal}, Int64, typeof(Base.sprint), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Grisu._show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 1}, Char, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.typeinfo_eltype), Type{T} where T})
precompile(Tuple{typeof(Base.:(==)), Type{T} where T, Nothing})
precompile(Tuple{typeof(Base.Math.clamp), Int64, Int64, Int64})
precompile(Tuple{typeof(Base._truncate_at_width_or_chars), String, Int64, String, String})
precompile(Tuple{typeof(Base._truncate_at_width_or_chars), String, Int64, String})
precompile(Tuple{typeof(Base.rpad), String, Int64})
precompile(Tuple{Type{Base.InterpreterIP}, Nothing, Ptr{Nothing}})
precompile(Tuple{getfield(Base, Symbol("##showerror#656")), Bool, typeof(Base.showerror), Base.IOContext{REPL.Terminals.TTYTerminal}, UndefVarError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##showerror")), NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{REPL.Terminals.TTYTerminal}, UndefVarError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.showerror), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, ErrorException})
precompile(Tuple{typeof(Base.showerror), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UndefVarError})
precompile(Tuple{getfield(Base, Symbol("#657#658")){UndefVarError}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(REPL.LineEdit.enter_prefix_search), REPL.LineEdit.MIState, REPL.LineEdit.PrefixHistoryPrompt, Bool})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#250#254")){REPL.LineEdit.PrefixHistoryPrompt}, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.edit_move_up), Any})
precompile(Tuple{typeof(REPL.LineEdit.history_prev_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, AbstractString})
precompile(Tuple{typeof(REPL.history_move_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, AbstractString, Bool, Any})
precompile(Tuple{typeof(REPL.history_move), Union{REPL.LineEdit.MIState, REPL.LineEdit.PrefixSearchState}, REPL.REPLHistoryProvider, Int64, Int64})
precompile(Tuple{typeof(REPL.LineEdit.transition), Function, REPL.LineEdit.PrefixSearchState, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#236#244")), Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.match_input), Base.Dict{K, V} where V where K, Any, Any})
precompile(Tuple{typeof(Base.read), Base.Filesystem.File, Type{Char}})
precompile(Tuple{typeof(REPL.LineEdit.match_input), Base.Dict{K, V} where V where K, Any, Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.update_key_repeats), REPL.LineEdit.MIState, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#108#160")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.edit_tab), REPL.LineEdit.MIState, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.tab_should_complete), Any})
precompile(Tuple{typeof(REPL.LineEdit.show_completions), REPL.LineEdit.PromptState, Any})
precompile(Tuple{typeof(REPL.LineEdit.common_prefix), Any})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPL.LineEdit.PromptState, Any})
precompile(Tuple{typeof(REPL.REPLCompletions.completions), String, Int64})
precompile(Tuple{typeof(Base._collect), Array{REPL.REPLCompletions.Completion, 1}, Base.Generator{Array{REPL.REPLCompletions.Completion, 1}, typeof(REPL.REPLCompletions.completion_text)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPL.REPLCompletionProvider, Any})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#4")), Bool, Bool, typeof(Base.Meta.parse), String})
precompile(Tuple{typeof(Base.incomplete_tag), Expr})
precompile(Tuple{typeof(REPL.REPLCompletions.complete_methods), Expr, Module})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#1")), Bool, Bool, Bool, typeof(Base.Meta.parse), Base.SubString{String}, Int64})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#4")), Bool, Bool, typeof(Base.Meta.parse), Base.SubString{String}})
precompile(Tuple{typeof(REPL.REPLCompletions.complete_symbol), String, getfield(REPL.REPLCompletions, Symbol("#21#25")), Module})
precompile(Tuple{typeof(Base.unique), Array{REPL.REPLCompletions.Completion, 1}})
precompile(Tuple{typeof(REPL.REPLCompletions.complete_symbol), String, getfield(REPL.REPLCompletions, Symbol("#22#26")), Module})
precompile(Tuple{typeof(REPL.REPLCompletions.completions), String, Int64, Module})
precompile(Tuple{typeof(REPL.REPLCompletions.get_type), Symbol, Module})
precompile(Tuple{typeof(Base.unique!), typeof(Base.identity), Array{Any, 1}})
precompile(Tuple{typeof(Base.unique!), Array{Any, 1}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#6#7")){Bool, REPL.LineEdit.PromptState, Float64}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#kw##refresh_multi_line")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#kw##refresh_multi_line")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(REPL.LineEdit, Symbol("#143#195")), String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_werase), REPL.LineEdit.MIState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#143#195")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.char_move_word_left), Base.GenericIOBuffer{Array{UInt8, 1}}, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##push_kill!#19")), Any, typeof(REPL.LineEdit.push_kill!), REPL.LineEdit.MIState, String, Any})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, String, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#708")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{getfield(Base, Symbol("##open#563")), Bool, Bool, typeof(Base.open), Base.CmdRedirect, Base.TTY})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.TTY})
precompile(Tuple{typeof(Base._crc32c), Base.IOStream, UInt32})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#698#700")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(MbedTLS.f_recv), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.__init__)})
precompile(Tuple{typeof(HTTP.URIs.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{HTTP.URIs.RegexAndMatchData, 1}, HTTP.URIs.RegexAndMatchData})
precompile(Tuple{typeof(HTTP.Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{HTTP.Parsers.RegexAndMatchData, 1}, HTTP.Parsers.RegexAndMatchData})
precompile(Tuple{typeof(HTTP.CookieRequest.__init__)})
precompile(Tuple{Type{Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, 1}, Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}})
precompile(Tuple{typeof(HTTP.ConnectionRequest.__init__)})
precompile(Tuple{typeof(HTTP.Servers.__init__)})
precompile(Tuple{Type{Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}, 1}, Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}})
